{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to SKILSTAK!","text":"<p>Welcome to the SKILSTAK Learning Community!</p> <p>You've reached the SKILSTAK knowledge base and home of the annual, rotating, crowd-sourced, live-streamed SKILSTAK Beginner Boost currently led by rwxrob. Here we document the skills, knowledge, and abilities needed to get and maintain an amazing career in tech. Master, beginner, or just lurker, we do hope you will join us as we blow the doors off of traditional education paradigms and focus on skills-based tech learning with substance.</p> <p>Pardon our plainness</p> <p>Perhaps you have noticed how boring our web site is. It isn't flashy by design. In fact, most overly flashy things are usually pretty sus. Our priority is on searchable, mobile-friendly, dynamic content that supplements YouTube videos, live Twitch sessions, Discord channel discussions, and\u2014most of all\u2014your own notes and labs. Like tech, this stuff is always changing so please adjust your expectations to match. If you see something wrong, please let us know.</p> <p>Want to help write these docs?</p> <p>Take note of the icons on each page that allow you to contribute content to the docs yourself.</p>"},{"location":"#what-have-people-said-about-rob-and-skilstak","title":"What have people said about Rob and SKILSTAK?","text":"<p>There's no better marketing than word of mouth. In fact, since 2013 we've never needed to advertise. The first two community members were referrals from friends who were in tech and knew their kids needed to learn it. Since then, SKILSTAK has helped thousands to accomplish their learning and career goals.</p> <p>Here's how one company representative described it in an email after hiring a community member with a 100,000 dollar starting salary:</p> <p>Clearly, you have a talent for educating people in tech. ... After [your member's] success [here], I suspect the review team will be even more interested in picking up one or two of your students. We've had a lot of very bright interns from some of the top universities in the country and [your community member] was right in the mix with the best of them.</p> <p>Rob met this person at a Linux meetup and introduced them to our community members.</p> <p>How to get a job?</p> <p>We talk about this a lot in the Boost. Getting hired is about building trust with potential employers by producing demonstratable, unique proof that you can produce what that company needs. We help people do it all the time.</p> <p>Since SKILSTAK is largely a labor of love we maintain a collection of nice things people have said over the years.</p> <p>Want to add your own nice comment?</p> <p>We love when people are helped. Feel free to mention it in the Discord or message rwxrob directly. Or, just add your own to the comments by making a PR.</p>"},{"location":"#whats-a-skilstak","title":"What's a SKILSTAK?","text":"<p>SKILSTAK (spelled incorrectly so we could get the domain names and social media accounts) is currently a learning community containing veterans and beginners alike helping one another to gain and maintain employable, relevant tech skills primarily involving the Linux and UNIX operating systems.</p> <p>The term \"skilstak\" was first created when Rob (founder) imagined an app for managing all the different skills he had to learn and maintain in a way that allowed them to be prioritized and evaluated regularly as well as displaying critical interdependencies, the goal being to keep one's \"skilstak\" fresh and relevant. This is particularly hard to do for overworked industry professionals who frequently are let go only to realize they cannot get another job because they have not managed and maintained their \"skilstak\" at all</p> <p>Would you go to a doctor that didn't keep up?</p> <p>Ever notice that doctors and dentists (and healthcare professionals like them) must keep with the latest procedures? They have at least as much to keep up with as a modern technology professional, yet we don't demand the same standard from tech professionals.</p> <p>Why? Probaby because people are less likely to die. But with the latest security incidents and the demand for Security Analysts increasing 35% per year people probably will start dying from tech pro failures. How about all the hospitals shut down completely during the pandemic because of poor security? How many people indirectly died because of it that we'll never know?</p> <p>Bottom line: it's far past time to require the same high standards from technology professionals that we do from our health care professionals.</p> <p>The term \"stack\" is frequently used in technology circles to refer to a collection of technologies that work well together. \"Do you use ELK or EFK stack?\" one might ask. Stacks frequently have acronyms associated with them (MERN, MEAN, LAMP, etc.) but not always.</p> <p>Picking what \"stack\" of \"skills\" you want to learn and maintain, therefore, has a direct corralary to the term SKILSTAK, as in, \"What your skill stack?\" Arguably, people usually say \"skill set\" instead, which is synonymous.</p>"},{"location":"#unbound-from-accreditation-lag-and-lies","title":"Unbound from accreditation lag and lies","text":"<p>All \"accredited\" organizations must submit their curriculum (and any change to it) to an accreditation agency to which they pay a large some of money to ensure their curriculum is sound and current. The problem is that the process can take up to a year. Executives in the education industry have frequently commented on how this inhibits innovation in the learning material itself. Considering that in a given year, perhaps three major revisions to employable best practices can happen there is simply no way such \"accredited\" institutions can ever keep up. Hell, people working in tech every day can't even keep up themselves. The pace is just that fast and only getting faster.</p> <p>Never count on any \"accredited\" institution to be able to teach you anything that will distinguish you from the mass of other out-of-date potential new hires. Your skills will be as dusty as the books in the back of their libraries and just as useless. Instead, you must learn to manage your own learning in a way that is free from institutional dependency. Just ask any successful person you trust working in tech today. They'll confirm it. Those institutions spend tons of money on marketing and lies convincing you to give them your money unnecessarily. They feed on it like a vampire does the blood of the naive innocent.</p> <p>Sometimes you do need a piece of paper, but more often than not you don't. We'll help you learn how to make that decision confidently for yourself. You are in control, not them.</p>"},{"location":"#free-from-corporate-bias","title":"Free from corporate bias","text":"<p>Some corporations have donated so much money to educational institutions that those running the corporation dictate the selection of technologies and learning offerings of what is suppose to be an independent educational organization responding to the needs of those paying money to learn from them. Some \"schools\" even accept cash \"endowments\" from these corporations while claiming it has no influence over their curriculum.</p> <p>Coincidence?</p> <p>Ever notice how most community colleges only teach networking on Cisco hardware? Or that colleges in towns dominated by the banking industry prefer to teach Java (which most banks fundamentally depend on) over other, more modern languages?</p> <p>Some corporations are so desperate to get people to learn their tech so they can sell that tech to others companies with big-pockets claiming it has \"wide adoption and developer support\" that they will \"give away\" education \"for free\" while hiding their agenda.</p> <p>Look deeper for yourself and you will see that greed dominates the world of traditional education and \"training\" and probably always will.</p> <p>Rest assured, that silliness will never happen at SKILSTAK. Decisions about which technology to invest in are always based on the needs and goals of the individual. Multiple community members, employed full-time by different and diverse companies provide a balanced voice and honest recommendations based on partial but informed opinions about what is best and most relevant to learn. As always, individuals are taught and encouraged to arrive at their own conclusions and develop their own learning plans free from such agendas and bias. And why not? That's how education should work.</p>"},{"location":"nice/","title":"Nice comments","text":"<p>Thank you to all the people who have made supportive, motivational comments in different ways over the years. It means a lot. And, if SKILSTAK has helped you in some way, please let us know.</p> <p>It's about community</p> <p>Rob started SKILSTAK, but it has always been the community that keeps SKILTAK going strong. Even Rob got his current corporate job through a SKILSTAK member referral.</p> <p>Won't you join us?</p> <pre><code>- Name:  Eva Feucht\n  Title: Director, Park Scholarships\n  Text:  |\n    Congratulations! On behalf of North Carolina State University, I am\n    pleased to announce that [your community member] has been named\n    a Finalist for Park Scholarships, one of the most prestigious merit\n    scholarship programs in the nation. Thanks in part to your\n    thoughtful recommendation, our Selection Committee was able to gain\n    valuable insight into this student's exceptional qualifications.\n\n- Name:  Justine Okerson and Ann Smith \n  Title: Scholar Selection Team\n  Text:  |\n    We are pleased to inform you that [your community member] is\n    a finalist for the Morehead-Cain, the first merit scholarship\n    program established in the United States.\n\n- Name:  Brent S. Clark\n  Title: Site Reliability Engineer, HomeAdvisor\n  Note:  Sent \"Thanks Award\" for helping learn Linux\n  Text:  |\n    Robert is a very skilled programmer. His ability to come up with\n    solutions to problems enables them to be resolved faster.  I worked\n    with him as a Systems Administrator. He was able to use his skills\n    to automate many of the processes that made work much easier for the\n    rest of the team. His zeal for coding prompted other team members to\n    strengthen and/or learn programming skills.\n\n- Name: Anonymous\n  Note: 'Started as \"junior\" developer for $100k annual salary'\n  Text: |\n    Rob helped me get out of retail and get work at a major software\n    company, using modern tools and technology. Along the way, I worked\n    on my own projects, learned how to use the linux command line like\n    a pro, and just learned a lot in general. Rob's mentorship has\n    definitely changed my life for the better!\n\n- Name: Anonymous\n  Note: Comment from web site\n  Text: |\n    Just wanted to say your website has been hugely useful to me and\n    a few of my peers in scientific computing, who often need to use\n    terminal but are more focused on science than coding practices.\n    Please keep on adding to your website. I will definitely refer my\n    colleagues to it going forward :)\n\n- Name: Anonymous\n  Note: Comment from web site\n  Text: |\n    Good site you have here. It's difficult to find high quality\n    writing like yours nowadays. I really appreciate people like you!\n    Take care!!\n\n- Name: Ryan Brink\n  Text: |\n    I want to thank you for all of the amazing information &amp; resources\n    that are available here on your site.  It is always a pleasure when\n    I come here and see a new blog post -- even (especially) when the\n    subject matter goes over my head -- it shows how much room I have to\n    grow.)  I have been visiting your site semi-frequently throughout\n    the year.  It is amazing and encouraging to see how passionate you\n    are about getting others to understand technology on a deeper level.\n\n    I am a web developer who did not take the traditional college path\n    to get where I am (boot camp grad, please don't hold that against\n    me). When I visit SkilStak I view it as being like a path of\n    breadcrumbs leading me to the things that are important and that\n    I should be focusing my time &amp; effort on learning.  You have my\n    gratitude for so freely sharing such a vast amount of info, often in\n    areas that reveal to me where my tech \"blind spots\" are so that\n    I may delve deeper.  My goal for 2020 is to have my personal website\n    up &amp; running.  SkilStak has been a big inspiration on my finally\n    putting in some work towards that goal.\n\n    Thank you for creating this amazing space for those of us who would\n    otherwise have never met you in person.  Keep up the incredible\n    work!\n\n    PS - You may recall that we had a brief Twitter exchange several\n    months ago.  I have been learning to do more on the terminal than\n    ever before, but I am still hoping for and looking forward to an\n    eventual Terminal Master course!  Until then I will be following the\n    book you recommend here (Learning the Linux Command Line, complete\n    with Bash v4 - I installed Ubuntu last week and I can't wait to\n    become a true terminal master!)\n\n- Name: Alastair\n  Text: |\n    Hi there. Just read you bad parent blog piece. You lost skilstak in\n    your medium/twitter handle so I thought I\u2019d see what it is. Broken\n    by the looks of it. Good in you for becoming an educator. It\u2019s not\n    easy but I hope it\u2019s rewarding.\n\n- Name: Anonymous\n  Note: Parent of a mentored community member\n  Text: |\n    Hi Rob - No reason for my email other than to say thank you for\n    everything you do for [our son]! He absolutely loves coding and his\n    hour with you is his favorite of the week. He spends his free time\n    working through the problems you help him come up with and he knows\n    what he wants to do with his life. We are so happy he has found\n    something he loves and just wanted to say thanks!\"\n\n- Name: Gabe Miller\n  Note: Employed at 16 as developer for solar energy company\n  Text: |\n    I have been with SkilStak for about 6 years now and it has been one\n    of the most valuable and impactful experiences in my life. I feel\n    that Mr. Rob has trained me extremely well and I feel prepared for\n    my future in programming and engineering. Mr. Rob has done so many\n    things for me over the years and caused me to get a extremely\n    valuable payed internship before I even finished High School, not to\n    mention multiple job offers with 6 digit salaries. I highly\n    recommend SkilStak for anyone who is interested in programming and\n    wants to be prepared for a career in programming and technology. It\n    has been more valuable than any other school of any kind that I have\n    been to. Mr. Rob and SkilStak taught me so much and prepared me for\n    even more. I wouldn't trade my experience there for anything in the\n    world.\n\n- Name: Anonymous\n  Note: Solar energy company that employed Gabe Miller \n  Text: |\n    Rob, you referred Gabe Miller to us last year at ... he's been\n    amazing!\n\n- Name: Anonymous\n  Note: Member of private mentored community\n  Text: |\n    Thank you so much for introducing me to coding! I have learned so\n    much. I love being able to create something anyone can enjoy. I hope\n    to see you in the Fall!\"\n\n- Name: Bob Theisen \n  Title: Network Engineering Instructor, Mitchel Community College\n  Text: |\n    I just want to encourage you to keep teaching. You\u2019re gifts aren't\n    just technical. You are making more of an impact then you know.\n\n- Name: Anonymous\n  Note: Parent of private mentored community member\n  Text: |\n    I just wanted to let you know that [my son] has really been enjoying\n    camp this week. He talks non-stop about it when he gets home. He\u2019s\n    so excited about what he\u2019s doing!! He just told me this has been the\n    best camp ever because they are learning and then get to play with\n    what what they learned. \ud83d\ude00\n\n- Name: Mary Muchane\n  Note: Mother of private community member accepted to NCSSM\n  Text: |\n    Mur and I really, really believe in what Skilstak is about and what\n    you are doing and have done for dozens of young boys and girls.\n    Beyond the coding and the career preparation, Skilstak provides a \u2018\n    place\u2018 for them and gives them the courage to wear their nerd badges\n    proudly.  I don\u2019t think it\u2019s hyperbole to say that the impact of\n    Skilstak will last throughout their lives regardless of the\n    trajectory each takes.\n\n- Name: Jennifer Miller\n  Note: Parent of private mentored community member\n  Text: |\n    My son attended the Minecraft camp today and is hooked! He is\n    registered for a coding class now every week! He just keeps thanking\n    us for finding this \u2018cool\u2019 place! I highly recommend for kids who\n    love technology and want to learn more!\n\n- Name: Bella\n  Note: Private mentored community member\n  Text: |\n    I have enjoyed my time learning at Skilstak! My favorite thing is\n    that we are always changing and learning the newest available\n    material for web development. Most of my girl friends don\u2019t like to\n    talk about code, but it is because they don\u2019t understand it. I have\n    found other coding girls at Skilstak, I enjoy figuring out\n    assignments together with them and also working at my own pace.\n\n- Name: Joni Dunn\n  Note: Parent of private mentored community member \n  Text: |\n    Rob does a fantastic job of engaging and teaching the kids without\n    them even knowing they\u2018re learning. :) We\u2019ll be repeat customers\n    every time my grandson comes for a visit!\n\n- Name: Dena Miller\n  Note: Mother of Gabe Miller\n  Text: |\n    My son has been attending SkilStak for almost four years now. He\n    started out in Code and Play and has progressed to Pro, gaining\n    invaluable coding skills and knowledge every step of the way! In\n    addition to classes, he has served as a TA or teacher\u2019s assistant\n    and aspires to be an instructor as his part-time job during his high\n    school years. He has not only learned several coding languages, but\n    has acquired a valuable work ethic and sense of community and active\n    citizenship. I have no doubt, that he truly has discovered his\n    lifelong passion and career path while attending classes at\n    SkilStak.  I am extremely grateful to Rob for providing my son with\n    his incredible coding abilities and life skills, and more\n    importantly, for serving as a mentor and positive male role model to\n    an impressionable teenager! I would wholeheartedly recommend the\n    SkilStak program as an extracurricular activity to any future coders\n    and their parents!\n\n- Name: Sandy M.\n  Note: \\\"Happy Mom\\\" of private mentored community member\n  Text: |\n    Our quiet, unexcitable 11 year old son has been taking classes with\n    Rob and his crew at Skilstak going on 3 1/2 years. These classes are\n    a challenge that school can not provide. He says that they are just\n    fun and he likes creating on the computer. But we see much more! We\n    have seen him become more creative and analytical, confident,\n    independent, and self-sufficient. Mr. Rob has opened his eyes to\n    future job possibilities and the importance of professionalism and\n    good character. As well as legitimate computer programming\n    instruction. He can\u2019t wait to go to the classes!\n\n    These classes are more than standard \u2018summer camp\u2019 computer classes.\n    Students are expected to actually learn different languages and\n    create programs. They will get certified at their own pace. And the\n    classes are challenging. We highly recommend Skilstak to anyone\n    wanting to do more than \u2018play on a computer\u2019.\n\n- Name: savagebananasoup\n  Note: Message from Livestream Viewer\n  Text: |\n    I've been a 'software developer' (whatever that means) for a couple\n    of years, been using Linux as a hobbyist for 10 years and I'm\n    learning loads from this guy.\n\n- Name: qmacro99\n  Note: Message from Livestream Viewer\n  Text: |\n    rwxrob's influence is all over my dotfiles now, bound into the way\n    I work.  \n\n- Name: Andriy Lapitskyy\n  Note: Message from Livestream Viewer\n  Text: |\n    Wanted to let you know I watched the 0-3 days [Beginner Boost] and\n    I liked what you had to say it's like you were speaking to my soul\n    \ud83d\ude05\n\n- Name: Lio Makki\n  Note: Message from Livestream Viewer\n  Text: |\n    Not everybody can recognize the value of Rob's content only the\n    intelligent people do.\n\n- Name: Zer0CoolAZ\n  Note: Message from Livestream Viewer\n  Text: |\n    Just wanted to reach out and say thank you for the environment that\n    you've fostered thus far, it's always exciting to learn from someone\n    so versed. Your playlist selection has also been a live saver for\n    many early morning starts where dousing fires was needed and sanity\n    was slipping.\n\n- Name: Randy\n  Note: Message from Livestream Viewer\n  Text: |\n    Hey Rob, I\u2019m a fairly new viewer and wanted to say thank you for the\n    work you are doing to build your knowledge tools and the community\n    around it.  But also for the free conversations and teachings you\n    are providing on YouTube.  I agree 100% with your comments about\n    Facebook and Google and think your knowledge projects are\n    fascinating.  But I also identity with your recent wisdom  about\n    mentoring and teaching.  I am 45 years old, graduated with a CS\n    degree in 2002, but because of various reasons I did not do well in\n    college and didn\u2019t pursue programming until about 6 years ago.\n    Through that pursuit I found a job which lead to a second job which\n    had me working on projects with zero documentation with languages\n    I did not know.   I struggled but eventually figured out what\n    I needed to get the work done, fix bugs, and add features.  That was\n    until I burned out February of last year.  Since then I\u2019ve been on\n    my own path of self learning and healing.\n\n    So when I first heard you talk about what an autodidact was\n    I realized that I\u2019ve already been doing that because I\u2019ve had too.\n    And that I am being one now.  Your conversations about all this has\n    given me context and validation.  So once again thank you for\n    putting all this out there for people like me to see.\n\n- Name: rossim2i2\n  Note: Message from Livestream Viewer\n  Text: |\n    This is such a small and trivial piece of code, but the amount I've\n    learned has been invaluable. Especially the feedback you've taken\n    the time to provide. [After woring on `cmdbox-isosec` with Git.]\n\n- Name: iambrockvond\n  Note: Message from Livestream Viewer\n  Text: |\n    I am catching up with the Boosts on 2x. Not a beginner but it's\n    filling in tons of gaps. Wanted to say thank you for this. Excited\n    to catch up to live.\n\n- Name: Mitchell Hynes:\n  Note: Message from YouTube Viewer\n  Text: |\n    Just watched your AMA comparing Rust hype to Node hype and as\n    a Rustacean of 2 years I couldn't agree more. It convinced me to not\n    put all my eggs in one basket and write more Go+C. Love your videos.\n\n- Name: zbrow\n  Note: Message from YouTube Viewer\n  Text: |\n    Rob could do a video on addition and subtraction and I'd still find something to learn.\n\n- Name: jaysega\n  Note: Message from Twitch and YouTube Viewer\n  Text: |\n    You know what's funny, after joining this stream just a few days\n    ago, I removed 95%+ of my twitch subs, and 99% of my youtube subs.\n    Signal to Noise ratio is real, made me realize how much noise I was\n    letting in. There are some true gurus I've also unsubbed just\n    because, right now I have to admit I cannot benefit from all of\n    them. It's not their fault they are just putting themselves out\n    there. But it's the rare few who are guru-ish status who also can\n    speak to newbs like myself.\n\n- Name: almrotation\n  Text: |\n    I've only been here for about an hour and you've literally broken\n    the mental barrier in my head telling me I cant do this on my own\n    thank you for the wisdom and motivation.\n\n- Name: lattjorr\n  Text: |\n    \u043e\u0447\u0435\u043d\u044c \u043a\u0440\u0443\u0442\u0430 \u0434\u0435\u0434\n\n- Name: cradersec\n  Text: |\n    I stumbled across your 2021 boost repo and I really appreciate the\n    way of thinking that you are promoting. I think it is rare in the\n    current time to have people advocating for critical thinking. Keep\n    up the good work.\n\n- Name: ind1emonk3y\n  Text: |\n    I explained the very basic of what I learned from your Boost on\n    docker to friend telling him, I can explain you in less than\n    10minutes.... In the end, we played for one hour and he was amazed\n    by containers!\n\n- Name: ChOkO08_\n  Text: |\n    I thought i knew shellscript until i came across @rwxrob streams :)\n    It's been really entertaining to \"relearn\" it with his examples.\n\n- Name: goobus_maximus\n  Text: |\n    Yeah, I know this is a coding channel! Your Youtube vids have really\n    helped me - I'm nearly through an interview process for an MLOps\n    role &amp; your content is a meaningful part of my success.\n\n- Name: adykaaa\n  Text: |\n    man, I should watch you more, you are motivating as fuck\n\n- Name: KonQuesting\n  Text: |\n      Becoming a \"terminal native\" has put me way ahead in that Amazon\n      training program I'm doing. Other people in there are network\n      engineers, Java developers, and they all think I'm hot shit.  So\n      rob's knowledge has definitely been a great boon to me. And this\n      community is stacked with amazing people.\n\n- Name: qt_pi3\n  Text: |\n    I feel like I've entered a new chapter in my life. I was living in\n    BRE (before rwxrob era) now im in RE (rwx rob era).\n\n- Name: narendev\n  Text: |\n    Glad to be here , crunching through your beginner boost vids. They\n    are great as I learn more and more Linux in just few hours than\n    stacking up bunch of linux related books.\n\n- Name: awptakesnoskill\n  Text: idk why but watching rob helps me focus\n\n- Name: cronto82\n  Text: This is best channel on Twitch\n\n- Name: stitchedd\n  Text: The beginner boost is the reason I started using Linux. I cant imagine going back.\n\n- Name: HeavyDrinker90210\n  Text: |\n    When considering \"Standing on the shoulders of giants\"; you are one\n    of this giants. o7 sir. \n\n- Name: KennithNichol\n  Text: Your scripts are artisan level.\n\n- Name: archification\n  Text: |\n    Hello sir rob. Not sure if you feel like reading or responding to\n    chat right now but I just wanted to thank you. You don't know it but\n    you helped me through a few dark times in my life. I'm starting my\n    first job in 10 years 2 hours from now. From nothing to database\n    admin.\n\n- Name: thed2\n  Text: |\n    guys, fyi the beginner boosts that rob is doing are really helpful,\n    got my knowledge and first job in cybersecurity with his boosts :)\n\n- Name: CuriousE1k\n  Text: |\n    I've learned a lot from you even though i'm here infrequently. It's\n    helped me greatly in my career as a SDET and advancing my knowledge\n    and i'm going to be continuing it and the self education as\n    a result. You helped me not give up. So thank you.\n\n- Name: miluba86\n  Text: |\n    I'm in health it so I am behind 5 to 10 years technology wise... do\n    still doing java and angular... but cloud movement change this\n    radically... we need k8s so questions arise... why JVM in\n    Containers... why so much ram consumption... so I started learning\n    go got good advice in here... so thank you Rob and community for\n    your help!\n\n- Name: be1ancour\n  Text: |\n    I need to tell you I copy some stuff from your Workspace container\n    and make my own personalized. Still is in progress I will use it for\n    Java development I want to express my gratitude for real these\n    videos of beginner boost helped me a lot.\n\n- Name: KonQuesting\n  Text: |\n    I just got a job offer for the most money I've ever made in my life.\n    Never worked in IT before, only FOSS experience. I owe you for\n    giving me the confidence to believe I could be \"enterprise ready\"\n    with strong fundamentals, and cover my knowledge gaps as an\n    autodidact.\n\n- Name: ohyounaasty\n  Text: |\n    hey there, stumbled across your youtube a while ago and it inspired\n    me to remove all my text editors and just use vim all the time\n    (something i've been meaning to do for 10+ years) - just wanted to\n    thank you, it's been transformative, really\n\n- Name: ghost_steve\n  Text: |\n    Hey Rob I see your busy, just wanted to say thank you for these\n    streams got me a job as Infrastructure eng.\n\n- Name: youaresourcecode\n  Text: |\n    I personally think Rob is best example of what's programming\n    means... I imagine unix core creators designing and programming unix\n    operating system kind of like Rob shows us in his streams. Keep it\n    up Rob!!!!!\n\n- Name: rwxLethalz\n  Text: &gt;-\n    Cause of rob ive gotten a job as a network tech making 25 hr just\n    a start but it helps.\n\n- Name: Wxaaz\n  Text: &gt;-\n    im from africa and a company in europe accepted me , my life\n    probably gonna change , but without the fuel i've once, i would\n    never sacrifice this far, so thank you so much\n\n- Name: qaerst\n  Text: &gt;-\n    I've literally built out my future career path on your advice , and\n    it helped me immensly. If you're ever in the EU , beer is on me.\n\n- Name: rwillex\n  Text: &gt;-\n    I just want to share with you that I got a \"devops\" job. Thank you so\n    much for all the help, and also the beginner boost helped me a lot.\n\n- Name: IMExploder\n  Text: I got my first k8s job last week, partly because of you.\n\n- Name: oppp20039\n  Text: &gt;-\n    What I like most about Rob is that he is not a nerd. I can't stand\n    nerds and never been able to be friend with one but this is one of\n    the few channels where a human is actually streaming. Maybe because\n    you talk about your life, maybe because you have strong opinions,\n    maybe because you understand life and things outside of coding.\n\n- Name: appproachsloth\n  Text: Rob is going to make a new standard I swear.\n\n- Name: (anonymous)\n  Text: &gt;-\n    I wouldn't have even gotten into vim and shell scripts if not for\n    the content I found through this stream.\n\n- Name: flipmybit\n  Text: &gt;-\n    Yo I just started Ashtanga yoga after seeing it here and I am loving\n    it so far.\n\n- Name: rossim2i2:\n  Text -&gt;\n    I used everything I learned here to write a Windows script\n    (basically wrote it in Bash and retrfit it to Windows Script) to\n    solve an issue at work. Not only did it impress my new boss (our\n    CIO), but also saved 5-10k in outsourced dev costs.\n\n- Name: GamingDizzyfly\n  Text: -&gt;\n      I somehow landed a \"cloud consultant\" role. I have to thank\n      u profusely for ur content and for inspiring me.\n\n- Name: touch_beans\n  Text: -&gt;\n    I got a job directly out of HS pretty much due to what I\u2019ve learned\n    from you. Not only that, but you helped me build a lifelong passion\n    purely by showing me what a passionate programmer is and what makes\n    programming exciting. For that, thank you.\n\n- Name: alonsete14\n  Text: -&gt;\n    just want to say I have found a job as backend dev with Go, your\n    streaming has motivated me a lot, thanks Rob!\n\n- Name: anonymous\n  Text: -&gt;\n    You've changed my life man, even though i'm just some pixels on your\n    monitor that sometimes pops up. Couple months ago I was puking due\n    to working 18 hour days for big oil, being so stressed that my hair\n    turned grey at my early 20's. Now I am able to send my mother on\n    a nice vacation and take care of my family :)\n\n- Name: Dorinpedala\n  Text: -&gt;\n    Hi there Rob, I am a sysadmin from Romania, finally I get to thank\n    you for the Beginner Boost you've done in 2020! Thanks to you\n    I landed the job of my life and got to play with a lot tone of\n    awesome tech!\n\n- Name: Himthecool21\n  Text: -&gt;\n     Whenever I watch your stream I get soo productive.\n\n- Name: desire_nothing:\n  Text: -&gt;\n     Hello rwxrob, how are you? First of all, thank you for all the\n     beginner boosts, you are the hero that we wanted and needed.\n     Sincerely, thank you. I wanted to ask because I am starting the\n     previous year BB with docker, you mention wsl2, but is it possible\n     to set it up with git bash? Thank you in advance and please keep\n     being so awesome, you are changing our lives for the better!\n\n     I can't thank you enough and you have no idea how much I respect\n     you for what you do for us - the community. A pure gem and I am\n     happy that I discovered your channel so early in my dev career.\n     Keep up being awesome!\n\n- Name: ChadWickTC\n  Text: Fun fact. You helped me land a job as a Cloud Linux Engineer. I start Dec 1st.\n\n- Name: ping_ochio\n  Text: -&gt;\n    Rob is an artist from the IT world, his room is his atelier, the\n    keyboard is his color palette, the terminal is his canvas, Twitch,\n    Youtube and github are his exhibition galleries.  Kappa\n\n- Name: Carson\n  Text: -&gt;\n    hey rob, this is your former student carson here if you happen to\n    remember me. trouble falling asleep right now and I was just\n    thinking about all those years I disliked you after you 'kicked me\n    out' when you downsized to private lessons, but I never have really\n    appreciated the gift you gave me until right about now. This funky\n    english with all sorts of weird symbols is soemthing not a lot of\n    people are capable of grasping, and yet you made it so easy and\n    I never really ever got to thank you\n\n- Name: sstichedd\n  Text: -&gt;\n    Every time I see you reference Zet, I smile. Your stream is the\n    reason I started using Linux 3 years ago. That is the time USING\n    computers started making sense to me. I am now starting my first\n    tech related job at 40 years old. When I started using vim to\n    manipulate code, and saw how it connected seamlessly with Linux, It\n    changed everything for me. No college degree, no education to speak\n    of, but I got hired on for the city of San Diego, CA as a data entry\n    specialist simply because of the skills I learned. Most of those\n    skills learned here, haha\n\n- Name: x_sharkuni_x\n  Text: -&gt;\n    You are a great teacher with a soothing voice full of knowledge.\n\n- Name: illusion4u\n  Text: -&gt;\n    Hey, Rob. How are you? Just dropping by to let you know, I'm\n    employed. I start tomorrow morning. You have been truly helpful for\n    me. See you, have a good hacking session\n\n- Name: Kano_steam\n  Text: -&gt;\n    I was able to land a full time junior position with no degree\n    because of you. Thank you for everything you do.\n\n- Name: AntNem_\n  Text: -&gt;\n    I just want to say thank you @rwxrob for being a positive influence\n    in my life  &lt;3\n\n- Name: adrnlnJnky\n  Text: -&gt;\n    I want to share: I took your Linux class in 2020 during the Covid lockdown.\n    I took your course then, from there I learned Go, then randomly Elixir and\n    now I have a job as a developer. That course your did for free was the jump\n    point that got me moving forward with traction...\n\n- Name: Dizzyfly\n  Text: -&gt;\n    Hi Rob! I hope all is well. I landed and kept my job thanks to your 2021\n    boost series on YouTube.\n\n- Name: Anyascii\n  Text: -&gt;\n    They haven't invented a title yet for the type of influencer you are.\n\n- Name: Alex\n  Text: -&gt;\n    Not sure if you remember me. I was at SkilStaks when it was in Cornelius around when I was in middle school or something and just wanted to thank you for all your teaching as now I'm a Freshman at UNC Charlotte and I was able to use what I learned all the way back then with Python to actually be able to test out of one of my classes.\n\n- Name: Mehmet\n  Text: -&gt;\n</code></pre>"},{"location":"rob/","title":"Stuff about Rob","text":"<ul> <li>\ud83e\uddb7 What's up with your teeth?</li> <li>\u2615 I drink espresso</li> <li>\ud83d\udcda Review: Bridges Out of Poverty</li> <li>\ud83d\ude32 Tale of Software and Game Dev category drama</li> <li>\ud83e\udd11 Support me with crypto?</li> </ul>"},{"location":"vlog/","title":"Video blogs","text":"<ul> <li>\ud83d\udd2e Batch is SEXY again (and Kubernetes kinda sucks)</li> </ul>"},{"location":"_homelab/","title":"homelab overview","text":"<p>\"I've hired many engineers and would easily hire someone who has built and maintains their own home lab over any possible certifications.\" (executive hiring manager for large tech corporation)</p> <p>Advantages:</p> <ul> <li>Solid, hands-on experience</li> <li>Includes hardware, networking, operations, and development skills</li> </ul>"},{"location":"_homelab/#stages-to-homelab-development","title":"Stages to homelab development","text":"<ol> <li>Start with old machine and install Linux/UNIX to breath new life.<ol> <li>Consider defunct, refurbished school lab computers.</li> <li>Consider single-board computers (SBC) for sensor-integration and AI.</li> <li>Take advantage of the \u201chype effect\u201d and buy refurbished over new.</li> </ol> </li> <li>When enough computers invest in a router and build home network.</li> <li>Save money and buy a refurbished server to host virtual machines.</li> <li>Save more money and buy multiple, small computers to build HW/HA cluster.</li> </ol>"},{"location":"_homelab/#what-about-power","title":"What about power?","text":"<ul> <li>Invest in a good power meter.</li> <li>Secret to managing power is having metered LED PDU (don't skimp on PDU).</li> </ul>"},{"location":"_homelab/#how-much-do-i-have-to-spend","title":"How much do I have to spend?","text":""},{"location":"_homelab/#virtualisation-considerations","title":"Virtualisation considerations","text":"<ul> <li>KVM is master of the universe</li> <li>QEMU emulates everything, not just Linux, but bloated a bit</li> <li>Firecracker replaced QEMU when small VMs wanted</li> <li>Firecracker is master of MicroVMs, but doesn't emulate everything</li> </ul>"},{"location":"admin/planning/","title":"Planning notes","text":""},{"location":"admin/planning/#sunday-february-25-2024-123047pm-est","title":"Sunday, February 25, 2024, 12:30:47PM EST","text":"<ul> <li>No calendar, just regular time</li> <li>20 min homework review + 3x40 with 6 minute breaks + 20 min homework assign + 2 min raid</li> <li>Focus on habitual streaming times (pm, sunsets, etc.)</li> <li>Consistent time for Beginner Boost (only): Sundays, noon-3pm</li> <li>Multi-stream to Twitch, YouTube, Facebook, and Kick</li> <li>Need to get scene switcher board (probably StreamDeck)?</li> <li>Start Restream to YouTube and hit \"Record\" at beginning of each block, then upload to YouTube</li> <li>It's actually easier to livestream raw content</li> <li>\"Make use of mods\" for titles and user management</li> <li>Still never going to have chat on the screen</li> <li>Only taking questions during the break</li> <li>Dedicated to Kris Nova</li> <li>Send people away with weekly \"homework\"</li> <li>Should we have a community-driven/maintained wiki?</li> <li>Always repeat the content of the chat before responding</li> <li>Prioritize good audio media (what if this is podcast only)</li> </ul> <p>Action items:</p> <ul> <li>Update <code>!boost</code> command (and all commands)</li> </ul>"},{"location":"boost/","title":"Overview of Beginner Boost!","text":"<p>Welcome to the annual SKILSTAK Beginner Boost!</p> <p>Since 2020, our community has come together every year to do a series of extremely casual live streams and videos to help beginners get good tech jobs starting from absolute zero.</p> <ul> <li>\ud83d\udcfa Overview of the 2024 SKILSTAK Beginner Boost</li> <li>\ud83d\udcfa Flipped classroom in 2024</li> <li>\ud83d\udcfa Welcome! 11:11:11 on May the Fourth</li> <li>\ud83d\udcfa Where are all the videos?</li> </ul>"},{"location":"boost/#schedule","title":"Schedule","text":"<ul> <li>\ud83d\udcfa Saturdays 11a-2pm | 2024 Beginner Boost schedule considerations</li> <li>\ud83d\udcfa Time together is for dialog, discussion, answering questions, \"unblocking\" you</li> </ul> <p>As masters and padwans, we begin on Star Wars day, May the 4<sup>th</sup> at 11:11:11. Since 2024 we follow an annual content rotation:</p> <ol> <li>18-20: [JOB] Start a career in tech (3 weeks)</li> <li>21-25: [WEB] Create basic web site with Markdown, HTML, CSS (4 weeks)</li> <li>26-30: [LINUX] Get a Linux machine (4 weeks)</li> <li>31-39: [BASH] Learn the Bash Command Line (8 weeks)</li> <li>40-52: [CODE] Learn to code in Python and JavaScript (12 weeks)</li> <li>52-01: [C] Learn C for understanding (2 weeks, condensed<sup>1</sup>)</li> <li>02-14: [GO] Develop enterprise software in Go (12 weeks)</li> <li>15-17: [LXC] Leverage Linux containers (docker, podman) (3 weeks)</li> </ol>"},{"location":"boost/#boost-is-not-a-course","title":"Boost is not a course","text":"<p>Remember that this is just a boost to get you going. We'll shoot for breadth over depth so that you go away at least knowing what you don't know and have the confidence to do stuff to fill in the gaps in your knowledge and mastery. The biggest challenge most learners have is knowing what to learn and why.</p> <p>The Beginner Boost is not a course. There is no syllabus, no certificate, no credential, no proof you did anything except your own work, notes, and knowledge. There's barely a schedule that changes organically as we go through it.</p> <p>Start thinking like a hacker</p> <p>Most people need to forget the old, broken ideas about learning, and start learning and thinking like a hacker. People who require the on-a-plate, tell-me-what-to-do form of education generally do very poorly in tech careers. We'll talk more about that during the Boost itself when we discuss the nature of true learning.</p>"},{"location":"boost/#targeted-careers","title":"Targeted careers","text":"<p>When deciding what to include we like to keep a list of typical job titles you might see out there that require or strongly benefit from the skills, knowledge, and abilities (SKAs for short) covered by the Boost:</p> <ul> <li>Security Analyst (Hacker)</li> <li>Site Reliability Engineer (SRE)</li> <li>Cloud Native Engineer</li> <li>Machine Learning Engineer</li> <li>Systems Engineer</li> <li>Platform Engineer</li> <li>Infrastructure Engineer</li> <li>DevOps Engineer</li> <li>Software Developer</li> <li>Web Developer</li> <li>Computer Scientist</li> <li>Computer Engineer</li> <li>Robotics Engineer</li> <li>Rocket Scientist</li> <li>Physicist</li> <li>Astronomer</li> <li>Any other career involving science and technology</li> </ul> <p>Check out the Bureau of Labor and Statistics technology careers</p> <p>The US BLS updates an annual collection of statistics related to career growth, demand, and pay. It is definitely worth checking out.</p> <p>https://www.bls.gov/ooh/computer-and-information-technology</p> <p>Take particular note of the Job Outlook indicating how fast the demand for each career is growing. For example, demand for Information Security Analysts (hackers) is growing by 35%, one of the fastest growing professions of all outpacing the next fastest growing tech career by 10% (Software Developers, 25%)! Beginner Boost skills are absolutely essential for any career in the Information Security industry and will give any Software Developer a solid advantage over all the rest.</p>"},{"location":"boost/#skills-format","title":"Skills format","text":"<p>Content is organized into procedural \"how-to\"s for specific skills as would be listed in a job description or resume. This provides better searchability, review, and is consistent with popular \"recipe\" books used by O'Reilly and others.</p> <p>Explaining procedures in this way is also the basis of learning like a hacker, or a magician for that matter. Each \"trick\" (or task) is captured with its specific steps. Tricks can then be combined in different ways. Learning this way is much like writing code for your own brain, or programming humans as if each task had a subroutine that can be written and stored in neurons like RAM in a computer.</p> <p>The Boost learning model, therefore, is designed to help you program your own brain to be able to do things much like an AI or software application. In fact, the only difference is that in order to write the code into your brain you have to repeat the steps of any task over and over to create those neural pathways, which is exactly what modern AI training does.</p> <p>Any skill requires certain knowledge and abilities as well:</p> <ul> <li>Skills</li> <li>Knowledge</li> <li>Abilities</li> </ul> <p>Here's how we create a learning segment about a specific skill:</p> <ol> <li>Write skill as if a bulleted line in a job description</li> <li>Break down the skill into procedure of tasks</li> <li>Write each task like a skill as well</li> <li>List any ability dependencies for task (typing, fine motor skills, etc.)</li> <li>Give knowledge required for task (terms, context, history, justification)</li> <li>Break down larger skills into smaller ones</li> </ol>"},{"location":"boost/#linux-focused","title":"Linux focused","text":"<p>All tech jobs targeted by the Boost significantly benefit from Linux skills. Linux is the operating system (like Mac or Windows) that runs most all of the tech infrastructure in our world today.</p>"},{"location":"boost/#learn-to-be-a-linux-user-first-not-admin","title":"Learn to be a Linux user first (not admin)","text":"<p>Most of the resources about Linux available on the Internet, free and paid, all suffer from the same frustrating flaw: they cover too much assuming the person learning Linux wants to be able to administer a Linux system rather than just benefit from using it.</p> <p>The Boost content is constantly being simplified and revised with one specific question in mind: Does a Linux user need to learn this? The result is simplified content that doesn't go into unnecessary rabbit holes. For example, a machine learning engineer or student using an assigned Linux user account never needs to understand how to create, modify, and delete users and groups on the system. Instead, learning how to co-exist safely with other users on a multi-user system is a more valuable use of time for an absolute beginner.</p>"},{"location":"boost/#linux-learning-never-ends","title":"Linux learning never ends","text":"<p>One of the best (and some would say worst) things about Linux is that no one ever learns it all. There is always some tip or tweak or new technique. Learning to use Linux is just the first step. Most of the careers listed above will require further learning skills that build on your new Linux user skills. This is why during the Boost you not only learn the basics of the Linux terminal command line but are also encouraged to learn to organize and design your own autodidactic learning plans. This specific skill is more important than all the others\u2014especially for those seeking careers as knowledge workers of any kind.</p> <p>How do we learn this in the Boost? By example. When we need to do a bit of research and learning we do it together using the best methods and tools available to any knowledge worker. The Linux terminal command line is objectively the fastest human-computer interface possible for knowledge work. As you master just-in-time learning (or learning at the speed of knowledge workers) then during and after the Boost you can take better control of your own learning plan tailored to your specific needs and goals.</p>"},{"location":"boost/#please-have-fun","title":"Please HAVE FUN! \ud83c\udf89","text":"<ul> <li>Chat, stickers, clips are all very welcome and appreciated</li> </ul>"},{"location":"boost/#legal-usage","title":"Legal usage","text":"<p>Copyright \u00a9 2013-2024 Robert S. Muhlestein rob@rwx.gg Content released under the Creative Commons (BY-NC-ND), code released under the Apache 2.0.</p> <p>Contributors and project participants implicitly accept the Developer Certificate of Authenticity (DCO) giving over all intellectual property rights to the copyright owner and asserting that they have legal permission to do so.</p> <p>\"SKILSTAK\", \"SKILSTAK Beginner Boost\", \"SKILSTAK Boost\", \u201cBeginner Boost\u201d and \u201cBoost\u201d are legal trademarks of Robert S. Muhlestein but can be used freely to refer to the this project without limitation. To avoid potential developer confusion, intentionally using these trademarks to refer to other projects\u2014free or proprietary\u2014is prohibited.</p> <p>The reason for \u201cno derivatives\u201d CC requirement is to preserve the consistency of opinions throughout the content since attribution is required. Without it, forks with changed opinions and resource listings could be purposefully or accidentally taken as the opinions of the original author. This is simply too dangerous to allow. The \u201cno derivatives\u201d clause protects against the inevitable \u201cconsensus\u201d problem that plagues community-created content. That said, please reach out by email if you have questions about contributing and collaborating.</p> <ol> <li> <p>Learn C for understanding is done at an accelerated pace in a condensed amount of time during the two-week holiday break in December. We follow the book Head First C. We have never finished the entire book, but work through as much as we can together.\u00a0\u21a9</p> </li> </ol>"},{"location":"boost/bash/","title":"Learn the Bash Command Line","text":"<p>Content will be added as it becomes available.</p>"},{"location":"boost/c/","title":"Learn C for understanding","text":"<p>Content will be added as it becomes available.</p>"},{"location":"boost/code/","title":"Learn to code in Python and JavaScript","text":"<p>Content will be added as it becomes available.</p>"},{"location":"boost/faq/","title":"Beginner Boost FAQ","text":""},{"location":"boost/faq/#where-are-all-the-videos","title":"Where are all the videos?","text":"<ul> <li>\ud83d\udcfa https://youtu.be/xa1yZBivH0E</li> </ul>"},{"location":"boost/faq/#where-can-i-watch-and-participate","title":"Where can I watch and participate?","text":"<p>Weekly video sessions are simultaneously live-streamed to Twitch, YouTube, Facebook, and Kick. Twitch is the primary platform and required for anyone who wants to play the games during the breaks. Chat from any of these platforms is visible but not necessarily relayed to the other platforms. In addition, Discord #live-chat channel contains all the chat from each session in a searchable format.</p> <p>Warning</p> <p>Everything you write in the chat is saved forever with the livestream video session. It is up to you to remain professional and civil. If not, you'll be banned. It is also up to you to maintain your own level of privacy.</p>"},{"location":"boost/faq/#what-if-i-cannot-make-the-live-sessions","title":"What if I cannot make the live sessions?","text":"<p>Twitch is where the learning party is. We encourage you\u2014above all\u2014to join us for any of the live Twitch sessions for all the fun, learning, music, and hype. Who knows? You just might be gifted a free subscription by another kind community member, or win the Stream Avatars battle royal! What will your avatar be?</p> <p>However, since 2024 you can do the entire Boost without ever even attending a live session because everything is recorded and available from YouTube videos. If you have questions you can always ask in Discord. This new recorded video approach is likely to be the new normal going forward, forever, since all we need to update are the videos with content that has changed year to year. Then, instead of redoing the same work every year, we add more content, and better, clearer content, revising every year as we go like a good code base.</p>"},{"location":"boost/faq/#why-every-year","title":"Why every year?","text":"<p>We do the Boost every year mostly because technology is advancing at an exponential pace. There is something substantially new every single year. A key skill as a technologist is being able to distinguish the trends from the long-term changes and invest our precious learning time on what matters. Working in tech is not unlike betting on stocks, you pick the right tech to master at the right time and you can win big, or you can quickly become irrelevant and get \"down sized.\" Therefore, having a Boost every year allows the community to contribute their observations about what is current and\u2014most importantly\u2014relevant.</p> <p>The Surfer Analogy</p> <p>Surfing requires a well-developed ability to see the ocean's minor undulations in the distance and predicting which will crest at the optimal time. As the wave takes more form, a skilled surfer will know when to start paddling in order to match the speed of the wave. If they take too long they won't be moving fast enough to catch it, too fast and they might overshoot it. When the wave crests the surfer can then stand on the board and ride it to glory before hopping off and paddling back out to sea to watch for the next one.</p> <p>Such is the life of a good technologist. Paddling equates to learning the technology as it forms and producing proof you have mastered it. Standing up on the board is like landing a lucritive tech job having prepared in advance and being one of only a few who can demonstrate mastery. Surfers wipe out, miss waves, or, on occasion, have sharks take bites out of them. Surfing is inherently risky and demands constant focus and fitness. Those who opt for tech careers commit to a similar lifestyle with its constant learning demands and very real risks. Tech jobs are not for everyone, but for many the continual challenge is exactly what they crave.</p>"},{"location":"boost/faq/#what-is-needed-to-participate","title":"What is needed to participate?","text":"<p>Boosts are always free (although donations, subs, and tips are appreciated and motivating). You will need a secure Internet connection, a capable computer with minimal admin permissions and skills for installing stuff into that computer. (Windows and Mac administration is not covered by the Boost.) Here are the specs for your main computer:</p> <ul> <li>Win/Mac/Linux</li> <li>4 Core (CPU)</li> <li>8 GB Memory (RAM)</li> <li>100 GB Free HD</li> </ul> <p>This computer will be a reliable place from which to participate and onto which you will install a minimal Linux virtual machine.</p>"},{"location":"boost/faq/#what-if-i-already-have-a-tech-job","title":"What if I already have a tech job?","text":"<p>People regularly comment that they have filled some gap or another by going through the content along with the rest of us. Plus, having veterans available to confirm and add to what Rob has to say is always valuable. In other words, we welcome as many experienced professionals as possible.</p> <p>By all means, please flex! But please seek to understand what the person with the question wants to accomplish before pushing your personal preference (aka \"I use Arch, by the way.\") Also, disagreement is generally okay but Rob asks that you first at least present his position (in his forum) before directly contracting it. This helps beginners avoid initial confusion that (eventually) comes from the normal, expected disagreements and opinions that occur in tech. We don't want to scare beginners away with a bunch of fights over operating system preferences, Linux distros, editors, coding languages, note-taking systems, business models, politics, and\u2014god forbid\u2014tabs versus spaces.</p>"},{"location":"boost/go/","title":"Develop enterprise software in Go","text":"<p>Content will be added as it becomes available.</p> <ul> <li>Pick the right approach to Go private module CI/CD</li> </ul>"},{"location":"boost/job/","title":"Start a career in tech","text":"<p>\ud83d\udcfa The following outline contains links to specific YouTube videos of varying lengths and can be considered a linear playlist in outline format. Line items that are not linked are videos yet to be made. To be notified of updates follow the repo (and drop us a star while you are at it).</p> <ol> <li> <p>Prepare yourself mentally</p> <ol> <li>Find happiness and motivation to overcome depression and self-doubt<ol> <li>Regularly make a list of what makes you grateful</li> <li>Listen to great music</li> </ol> </li> <li>Put in the time to get results</li> <li>Know that it is never too late</li> </ol> </li> <li> <p>Discover what you want to do and where</p> <ol> <li>Discover what tasks and activities you enjoy</li> <li>Research which careers involve those activities</li> <li>Make a short list of employers hiring for specific job listings</li> <li>Reach out to employers with matching job listings</li> <li>Track your skill stack (origin story for skilstak.io)</li> <li>Discover what career opportunities exist in the tech industry</li> <li>Determine if you want a tech lifestyle<ol> <li>Maximum flexibility for remote work/life balance</li> <li>Keep skills up to date on your own time (become an autodidact)</li> <li>Insist on Fridays for learning and working on own projects</li> <li>Be willing to meet whenever and wherever needed</li> </ol> </li> <li>(extra) \"Ops? Apps? Which one should I focus on?\"</li> <li>(extra) Know which job you want and why?</li> <li>(extra) How to survive the collapse of late-stage capitalism</li> <li>(extra) Know how to find all the \"blacksmith\" jobs, and why</li> <li>(extra) Know why freelance web developers fail</li> <li>(extra) Pay your way through college with tech skills</li> <li>(extra) \"Will cybersecurity be included in the Boost?\"</li> </ol> </li> <li> <p>Learn what is required for the specific career you have targeted</p> <ol> <li>Know when a Computer Science degree can help (or hurt)</li> <li>Know if you need to go to college or not</li> <li>Known if you should \"certify\" or not</li> <li>Leverage as much free learning as possible<ol> <li>Don't waste time on \"leetcode\"</li> <li>Build passionate \"solutions\" to real problems</li> <li>NEVER pay money for a \"bootcamp\"</li> <li>Do what TJ Holowaychuk does to learn</li> </ol> </li> <li>Consider accredited online college degrees like WGU</li> </ol> </li> <li> <p>Think like a hacker</p> <ol> <li>Find purpose like Aaron Swartz</li> <li>Unlock your creative potential like Sir Ken</li> <li>Be lazy, be impatient, and have (some) hubris</li> <li>Take risks, fail faster</li> <li>Avoid Anakin Syndrome, know you don't know</li> </ol> </li> <li> <p>Be sure you have basic computer skills</p> <ol> <li>Learn how to really type</li> <li>Get a computer you can modify with admin access</li> <li>Install and learn the best web browser for work</li> <li>Create a free ProtonMail account for personal use</li> <li>Create a free Google/YouTube/Gmail account for personal use</li> <li>Forward multiple Gmail accounts to ProtonMail</li> <li>Don't become a tech bigot</li> <li>Know what it means to have \"strong opinions\" that are \"weakly held\"</li> <li>Develop search-centric user interface habits<ol> <li>Learn the universal Alt-Tab technique (avoid hyper-specific alternatives)</li> <li>Master the search field hotkey for your computer operating system</li> </ol> </li> <li>Leverage AI assistants to your advantage</li> </ol> </li> <li> <p>Build a professional learning network in person and on social media</p> <ol> <li>Learn from those with actual experience and passion</li> <li>Understand the role of a mentor</li> <li>Find a good recruiter</li> <li>Make yourself discoverable to other tech professionals and employers<ol> <li>Create a GitHub account and private notes repo<ol> <li>Create a GitHub special profile repo</li> <li>Create an online resume/cv on GitHub [part of WEB]</li> <li>Create optional additional GitHub accounts for testing</li> </ol> </li> <li>Create a Twitch account</li> <li>Create a LinkedIn account, but understand its limitations and flaws</li> <li>Create a Mastodon account</li> <li>Create a Twitter account (ugh, yes, I know)</li> <li>Document your projects and learning publicly</li> </ol> </li> </ol> </li> <li> <p>Get the job</p> <ol> <li>Understand how employment happens</li> <li>Leverage your professional learning network</li> <li>Publish a resume or CV (from structured YAML data)</li> <li>Never cold-call or spam applications</li> <li>Beware of LinkedIn</li> <li>Shun companies that require \"white board\" interviews</li> <li>Seek opportunities to demonstrate your skills (internships, take-home projects)</li> </ol> </li> </ol>"},{"location":"boost/linux/","title":"Get a Linux machine","text":"<p>Content will be added as it becomes available.</p> <ol> <li>Allocate 100GB storage to virtual machine</li> </ol>"},{"location":"boost/lxc/","title":"Leverage Linux containers","text":"<p>Content will be added as it becomes available.</p>"},{"location":"boost/web/","title":"Create basic web site with Markdown, HTML, CSS","text":"<p>Content will be added as it becomes available.</p> <ol> <li>Create an online resume/cv on GitHub</li> </ol>"},{"location":"boost/2024/","title":"2024 Boost overview","text":"<p>Note 2024 is still in planning stages.</p> <p>Consider waiting until we are done</p> <p>Some people may find it better to simply wait until the entire Boost has completed so they can work as fast as they want through the material at their own pace\u2014particularly if you are impatient and have a hard time with the informal, often disorganized way we work through the content.</p>"},{"location":"boost/2024/#before-we-begin","title":"Before we begin ...","text":"<p>Here's what you need before considering the Boost. Don't worry, it's not much\u2014especially considering that the Boost is entirely free (donations welcome). Most of your investment will be time, but most people will have some minimal financial expense as well. Check if you have this stuff already:</p> <ul> <li>Internet access from a secure local area network (home, school, etc.)</li> <li>A reliable computer connected to the Internet (Mac, Windows, Linux)</li> <li>A minimal computer (preferably with Intel chip) on which to install Linux</li> <li>8+ GB USB thumb drive that can be completely overwritten.</li> </ul> <p>The reason for the first computer is to have a reliable connection to the Internet on which to initially take notes, create GitHub account, read documentation, watch Boost videos, download installation files, and create the USB drive you'll use to install Linux onto the second computer. This also frees you from any impact should the Linux installation fail for any reason.</p>"},{"location":"boost/2024/#finding-a-machine-for-linux","title":"Finding a machine for Linux","text":"<p>Laptops and machines compatible with Linux can easily be found among those normally discarded, in fact, rejuvenating and recycling old hardware with Linux is one major advantage of learning Linux in general. But make no mistake, an \"old\" computer can serve as a really good Linux machine often comparable to those you would pay \\$200/month for in the cloud. The feeling of restoring an old machine with Linux is nothing short of magical. Your friends and family will be amazed and you'll have a \"full metal\" Linux on which to hone your coder and hacker skills. If you do decide to buy a dedicated machine any computer (around \\$150-\\$200) will be more than enough.</p> <p>Linux isn't for gaming. Linux is the game.</p> <p>There is a lot of talk on the Internet about \"Linux gaming\" but most of it is frankly silly. While it is true that these days you can play most all games on Linux installed (on gaming hardware), and that Valve runs Arch Linux on SteamDeck, the entire point of Linux is to gain real skills and experience on minimal hardware. While others are spending way too much on gaming rigs and grinding to build virtual XP you'll be building actual experience and skills that are not only entertaining\u2014even addicting\u2014but profitable.</p>"},{"location":"boost/2024/#manage-your-learning","title":"Manage your learning","text":"<ul> <li>Become an autodidact: start managing your own learning. (1h)</li> <li>Use search-centric system navigation on Windows, Mac, or Linux. (20m)</li> <li>Take efficient, searchable notes with Markdown on GitHub. (1h)</li> <li>Grok benefit and origin of command line and terminal user interfaces. (1h)</li> </ul>"},{"location":"boost/2024/#install-linux","title":"Install Linux","text":"<p>It is still generally not possible to purchase Linux on a new computer (even if and when it is possible you generally wouldn't want to overpay to do it). Besides, there are few joys in the life of a techie more satisfying than breathing new life into old, discarded computers resurrecting them from the grave of deprecation to live again as truly great Linux servers and secondary workstations.</p> <p>We will install Linux onto four different machines:</p> <ol> <li>Virtual machine with Kali Linux Desktop</li> <li>Virtual machine with FreeBSD</li> <li>Headless server with Ubuntu Server</li> <li> <p>Laptop workstation with Linux Mint Cinnamon</p> </li> <li> <p>Install bash terminal on anything (Windows, Mac, Linux). (1h)</p> </li> <li>Know why Ubuntu is the most relevant Linux distro. (20m)</li> <li>Create and access Ubuntu Linux Server virtual machine with VMware. (2h)</li> <li>Use secure shell (ssh) to safely interact with remote systems. (1h)<ul> <li>Grok basics of public key cryptography</li> </ul> </li> <li>Do things as administrator (admin, root) but only when necessary. (20m)</li> <li>Install and update software with <code>apt</code> package manager. (1h)</li> </ol> <p>TODO</p> <ul> <li>Create Linux Mint Cinnamon (desktop) installer on USB stick. (20m)</li> <li>Install Linux Mint Cinnamon (desktop) onto dedicated Linux workstation. (1h)</li> </ul>"},{"location":"boost/2024/#find-your-way-around","title":"Find your way around","text":"<ul> <li>Get help for any Linux command without the Internet. (20m)</li> <li>Use tab-completion to speed command line input. (20m)</li> <li>Navigate Linux file system and understand general organization. (2h)</li> </ul>"},{"location":"boost/2024/#command-power","title":"Command power","text":"<ul> <li>Capture, append, and connect command input, output, and errors. (1h)</li> <li>Run commands on multiple files using wildcard globbing. (1h)</li> <li>Search and filter text input and files with regular expressions. (2h)</li> <li>Edit text files in-place from the command line. (1h)</li> </ul>"},{"location":"boost/2024/#edit-text-from-any-terminal-like-a-pro","title":"Edit text from any terminal like a pro","text":"<ul> <li>Understand different terminal editors for different work requirements. (20m)<ul> <li>Being productive on any UNIX system (not just one cozy one)</li> <li>Why no <code>emacs</code>?</li> <li>Why no <code>neovim</code>?</li> </ul> </li> <li>Edit text files visually using major terminal editor apps. (4h)<ul> <li><code>ed</code></li> <li><code>nano</code></li> <li><code>vi</code></li> <li><code>vim</code></li> </ul> </li> <li>Customize Vim configuration. (1h)</li> </ul>"},{"location":"boost/2024/#move-to-modern-multiplexer","title":"Move to modern multiplexer","text":"<ul> <li>Understand the three main reasons to use a multiplexer.<ul> <li>Multiple windows on one screen with cut/paste. (20m)</li> <li>Maintain persistent session even when lost connection. (20m)</li> <li>Share interactive session in real-time with others. (20m)</li> </ul> </li> <li>Use <code>screen</code> on any UNIX system. (1h)</li> <li>Use <code>tmux</code> when available. (1h)</li> <li>Customize <code>tmux</code> configuration to \"feel\" like <code>screen</code>. (1h)</li> </ul>"},{"location":"boost/2024/#get-answers-from-the-internet-without-leaving-terminal","title":"Get answers from the Internet without leaving terminal","text":"<ul> <li>Grok Internet networking. (1h)</li> <li>Do effective research from command line with lynx or w3m. (1h)</li> <li>Leverage command history using terminal editor actions to save time. (20m)</li> <li>Customize lynx configuration. (1h)</li> <li>Send AI (ChatGPT) queries from the command line. (1h)</li> </ul>"},{"location":"boost/2024/#find-files-and-vulnerabilities-like-a-hacker","title":"Find files (and vulnerabilities) like a hacker","text":"<ul> <li>Find specific files anywhere and determine what they are. (1h)</li> <li>Understand and manipulate Linux file ownership and permissions. (1h)</li> <li>Grok bases, binary, octal, decimal, and hexidecimal</li> <li>Create a simple intrusion detection system. (1h)</li> </ul>"},{"location":"boost/2024/#start-building-your-terminal-toolkit","title":"Start building your terminal toolkit","text":"<ul> <li>Grok the benefit of creating and maintain your own, portable toolkit. (20m)</li> <li>Organize commands and start your own \"dot files\" GitHub repo. (1h)</li> <li>Organize git repositories. (20m)</li> <li>Save source to GitHub with git and gh. (1h)</li> <li>Use symbolic links. (10m)</li> <li>Write first safe shell scripts in bash and POSIX sh (ash/dash). (30m)</li> <li>Check your scripts are safe with shellcheck. (20m)</li> <li>Automatically format shell scripts with shfmt. (20m)</li> <li>Manage processes (programs currently running). (1h)</li> <li>Grok UNIX philosophies and use UNIX filters over plugins. (20m)</li> <li>Understand ASCII, terminal encoding, and escape sequences. (30m)</li> <li>Customize bash profile and environment. (1h)</li> <li>Grok and apply everything in the bash manual page (man bash). (4h)</li> <li>Do math in the shell safely and reliably with bc and dc. (1h)</li> <li>Parse JSON with jq. (1h)</li> <li>Parse YAML with yq. (1h)</li> <li>Master parsing other delimited formats. (30m)</li> <li>Try a little Python. (2h)</li> <li>Try a little Go. (2h)</li> </ul>"},{"location":"boost/2024/#learn-just-enough-web-dev","title":"Learn just enough Web dev","text":"<ul> <li>Know how much Web dev is expected from all techies (20m)</li> <li>Learn enough HTML to grok Markdown rendering (1h)</li> <li>Learn enough CSS to make rendered Markdown pretty (1h)</li> <li>Learn enough vanilla JavaScript to add occasional widget (1h)</li> <li>Don't bother learning any \"frameworks\" (for now) (20m)</li> <li>Use only the best Web dev learning resources (20m)</li> <li>Understand PWAs and what it means to be \"progressive\" (20m)</li> <li>Use <code>zet</code> (or something like it) to publish your live notes (1h)</li> <li>Create a static site generator with <code>pandoc</code> and 10-lines of bash (1h)</li> <li>Publish to Web automatically with GitHub pages (30m)</li> <li>Publish to Web automatically with Netlify (30m)</li> <li>Learn to leverage Go text and HTML templates (30m)</li> </ul>"},{"location":"boost/2024/#become-employable","title":"Become employable","text":"<ul> <li>Grok that employment is about trust and people, not positions. (20m)</li> <li>Network and foster a professional learning network/community. (1h)<ul> <li>Grow neck beard (where possible) lol.</li> <li>\"Strong opinions, weakly/weekly held.\"</li> </ul> </li> <li>Start listening for opportunities now. (20m)</li> <li>Forget about LinkedIn. (20m)</li> <li>Complete GitHub profile page and grok job discovery from GitHub. (1h)</li> <li>Create and maintain a consumable, sustainable resume. (2h)<ul> <li>Don't call yourself a \"junior\"</li> <li>Job titles are mostly bullshit (too bad no role-based employment)</li> </ul> </li> <li>Target occupations you want and start applying. (1h)<ul> <li>How much salary do I actually need?</li> </ul> </li> </ul>"},{"location":"boost/2024/#have-a-strategy-for-what-comes-next","title":"Have a strategy for what comes next","text":"<ul> <li>Know when and how to certify and why you might want to add it. (1h)</li> <li>Set healthy work boundaries and self-care habits. (1h)</li> </ul>"},{"location":"boost/2024/#pay-it-forward-1h","title":"Pay it forward! (1h)","text":"<ul> <li>Remember where you were. (20m)</li> <li>Become a mentor. (20m)</li> <li>Never stop learning. (20m)</li> </ul>"},{"location":"boost/2024/#what-wont-we-learn-here","title":"What won't we learn (here)?","text":"<p>There's a lot of stuff to learn and eventually we do hope to cover it in one of the other learning series we have planned. This is a place to capture that stuff when we think of it.</p>"},{"location":"boost/2024/#polyglot-programming","title":"Polyglot Programming","text":"<ul> <li>How to code in any language other than bash and a little Python and C</li> <li>How to create and work with containers</li> <li>How to create micro-services</li> <li>How to interact with Web APIs</li> </ul>"},{"location":"boost/2024/#homelab-init","title":"Homelab Init","text":"<ul> <li>How to setup a local VLAN</li> <li>How to setup and manage own DNS server</li> <li>How to safely tunnel web-facing services through external providers</li> <li>How to setup on-prem vanilla Kubernetes cluster</li> <li>How to setup local virtual machine hosting with QEMU/libvirt</li> </ul>"},{"location":"boost/2024/#changes-since-2023-and-other-previous-boosts","title":"Changes since 2023 (and other previous Boosts)","text":"<p>2024 we are breaking the Beginner Boost up into smaller educational content modules in line with the original 2013 SKILSTAK content organization:</p> <ol> <li>Start a career in tech</li> <li>Create a basic web with with HTML, CSS, and JavaScript</li> <li>Get a Linux machine</li> <li>Learn the Bash Command Line</li> <li>Learn coding fundamentals in Python and JavaScript</li> <li>Learn C for understanding</li> <li>Develop enterprise software in Go</li> <li>Leverage Linux containers (docker, podman)</li> </ol> <p>In addition, the following will be back to SKILSTAK original pedagogical format:</p> <ul> <li>Linux on machines, both virtual and metal (no containers)</li> </ul> <p>As usual, none of this annual content will ever cover the following important topics and most tech professionals will have to learn elsewhere:</p> <ul> <li>Cloud services</li> <li>Data structures and algorithms</li> <li>Creating and working with AI models</li> <li>Kubernetes</li> <li>Cybersecurity</li> <li>Computer engineering</li> </ul> <p>These are not covered because they are specializations of a particular tech career path rather than general knowledge that all tech professionals should have preferably before pursuing a career in tech at all.</p>"},{"location":"boost/2024/#linux-machines-metal-and-virtual","title":"Linux machines, metal and virtual","text":"<p>2024 returns to the original focus of installing and running Linux on a real (\"metal\") machine in addition to installing on a VMware virtual machine running on Windows or Mac. </p>"},{"location":"boost/_old/bash/","title":"What's a bash?","text":"<p>Note</p> <p>The term \"bash shell\" is a little repetitive since bash stands for \"bourne-again shell.\"</p>"},{"location":"boost/_old/files/","title":"How to I change the content of an existing file from terminal?","text":""},{"location":"boost/_old/files/editing/","title":"How to I edit files from the terminal?","text":"<p>Changing the content of a file from the terminal can be done in one of two ways, usually referred to as modes: visual and command.</p> Mode Description Visual Open the file in an editor and interactively change its contents Command Run one or more commands that alter the content of the file <p>The most powerful editors combine these two modes together allowing the best of both worlds. But before you will fully appreciate this power you must first understand the UNIX philosophy and the use of UNIX filters (over plugins). To best master these concepts its best to learn several editors and commands</p> <p>Note</p> <p>It's worth mentioning that sometimes opening a file to be edited using a graphic editor (such as VSCode) is also possible from the terminal command-line. For VSCode, for example, simply running the <code>code</code> command from the current directory using the VSCode terminal interface will open that directory into the graphic editor. In fact, it is often faster to navigate to the files that you wish to edit from the terminal interface and then open it graphically. Search for VSCode to see more examples of how the terminal can improve your graphic sessions as well.</p>"},{"location":"boost/_old/files/editing/ed-ex/","title":"Editing files with ed/ex","text":""},{"location":"boost/_old/files/editing/nano/","title":"Editing files with nano","text":""},{"location":"boost/_old/files/editing/nvi/","title":"Editing files with nvi","text":"<p>Note</p> <p>Even though it's an easy mistake to make, <code>nvi</code> predates <code>nvim</code> by more than a decade.</p>"},{"location":"boost/_old/files/editing/nvim/","title":"Editing files with neovim","text":""},{"location":"boost/_old/files/editing/vi/","title":"Editing files with vi","text":""},{"location":"boost/_old/files/editing/vim/","title":"Editing files with vim","text":""},{"location":"boost/_old/files/editing/what-about/","title":"What about ... editor?","text":""},{"location":"boost/_old/files/editing/what-about/#editing-files-with-emacs","title":"Editing files with emacs","text":""},{"location":"boost/_old/files/editing/what-about/#editing-files-with-vscode","title":"Editing files with VSCode","text":""},{"location":"boost/_old/files/filtering/","title":"Why learn to change the contents of a file using nothing but commands?","text":"<p>Before learning how to use one of the standard terminal editors you really should first learn how to cope with a terminal that cannot be run in visual mode at all. In fact, in the 70s there was no visual mode. Everything was accomplished with commands chained together in what would become known as pipelines.</p> <p>Danger</p> <p>We all saw you yawn reading that \"boomer\" pipeline reference. \ud83d\ude09 But hold up a minute before you scroll past it.</p> <p>Consider that most hackers use commands for changing file content all the time because their backdoor malware only allows commands to be run without a \"full visual interface\" that requires additional device access. Even minimally accessing these devices can trigger monitoring software. So, if you are a potential hacker who doesn't want to get caught it's best you learn how to change what's in a file without a posh editor. That's right, vi is posh in such cases.</p> <p>If you didn't understand any of that, you will soon enough.</p> <p>One significant advantage of changing file content using a command pipeline (instead of an editor) is that those commands can be combined with other commands in order to setup automations triggered by events or scheduling. So even though authoring book-like content (such as this) is better from an editor, there are many very real reasons to master file manipulation with command pipelines and filters, first.</p> <p>Plus, once you have mastered file manipulation using only commands you'll be able to use those skills directly from within certain editors to supercharge your terminal visual editing sessions as well. People will watch you in agonizing envy as you perform terminal editing magic \ud83e\uddd9 that their stupid, bloated graphic text editors can't even attempt.</p>"},{"location":"boost/_old/learn-to-learn/","title":"How does anyone learn anything?","text":"<p>People mostly learn by doing (which is exactly what we do in the Boost).</p> <ul> <li>Tell you want I'm gonna do.</li> <li>Do it while demonstrating and explaining.</li> <li>Have you do it and monitor you.</li> <li>Make corrections.</li> <li>Repeat.</li> </ul>"},{"location":"boost/_old/learn-to-learn/#understanding-skas-skills-knowledge-and-abilities","title":"Understanding SKAs (skills, knowledge, and abilities)","text":""},{"location":"boost/_old/learn-to-learn/#learning-skills","title":"Learning skills","text":""},{"location":"boost/_old/learn-to-learn/#memorizing-knowledge","title":"Memorizing knowledge","text":""},{"location":"boost/_old/learn-to-learn/#identifying-and-developing-abilities","title":"Identifying and developing abilities","text":""},{"location":"boost/_old/learn-to-learn/autodidactic/","title":"Autodidactic habits","text":""},{"location":"boost/_old/learn-to-learn/autodidactic/#stems-from-natural-curiosity","title":"Stems from natural curiosity","text":""},{"location":"boost/_old/learn-to-learn/autodidactic/#learn-to-answer-your-own-damn-questions","title":"Learn to answer your own damn questions","text":""},{"location":"boost/_old/learn-to-learn/autodidactic/#more-than-independent-learner","title":"More than \"independent learner\"","text":""},{"location":"boost/_old/learn-to-learn/ed-fails/","title":"Traditional education fails","text":""},{"location":"boost/_old/learn-to-learn/ed-fails/#oppression-begins-at-home","title":"Oppression begins at home","text":""},{"location":"boost/_old/learn-to-learn/ed-fails/#controlled-by-greed-profit-and-power","title":"Controlled by greed, profit, and power","text":""},{"location":"boost/_old/learn-to-learn/ed-fails/#banker-style-education-has-never-worked","title":"\"Banker style\" education has never worked","text":""},{"location":"boost/_old/learn-to-learn/ed-fails/#beating-the-creativity-out-of-our-children","title":"\"Beating\" the creativity out of our children","text":""},{"location":"boost/_old/learn-to-learn/ed-fails/#the-plague-of-intellectual-laziness","title":"The plague of intellectual laziness","text":""},{"location":"boost/_old/learn-to-learn/fight/","title":"Fight for your right to learn","text":""},{"location":"boost/_old/learn-to-learn/fight/#stop-fearing-failure","title":"Stop fearing failure","text":""},{"location":"boost/_old/learn-to-learn/fight/#take-responsibility","title":"Take responsibility","text":""},{"location":"boost/_old/learn-to-learn/fight/#give-yourself-permission","title":"Give yourself permission","text":""},{"location":"boost/_old/learn-to-learn/fight/#defend-your-creativity","title":"Defend your creativity","text":""},{"location":"boost/_old/learn-to-learn/fight/#destroy-dogma","title":"Destroy dogma","text":""},{"location":"boost/_old/learn-to-learn/mentoring/","title":"It's about people","text":"<ol> <li>My Mother</li> <li>My Grandpas</li> <li>Mr. (Blaine) Poulson</li> <li>Mr. Bevans</li> <li>Mr. Lundquist</li> <li>Harold, Mel, Devin, and Bob</li> <li>Joey \"You could always use Linux\"</li> <li>Indirectly<ol> <li>TJ Holowaychuk</li> <li>Aaron Swartz</li> </ol> </li> </ol>"},{"location":"boost/_old/learn-to-learn/progressive/","title":"Layered learning: personal progressive enhancement","text":""},{"location":"boost/_old/learn-to-learn/rwx/","title":"Extending the scientific method with RWX","text":""},{"location":"boost/_old/learn-to-learn/rwx/#r-is-for","title":"R is for ...","text":""},{"location":"boost/_old/learn-to-learn/rwx/#r-is-for-reading","title":"R is for reading","text":""},{"location":"boost/_old/learn-to-learn/rwx/#r-is-for-researching","title":"R is for researching","text":""},{"location":"boost/_old/learn-to-learn/rwx/#r-is-for-reflecting","title":"R is for reflecting","text":""},{"location":"boost/_old/learn-to-learn/rwx/#r-is-for-relating","title":"R is for relating","text":""},{"location":"boost/_old/learn-to-learn/rwx/#r-is-for-reporting","title":"R is for reporting","text":""},{"location":"boost/_old/learn-to-learn/rwx/#r-is-for-repeating","title":"R is for repeating","text":"<p>Quote</p> <p>\u041f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0435 \u2014 \u041c\u0430\u0442\u044c \u0423\u0447\u0435\u043d\u044c\u044f</p>"},{"location":"boost/_old/learn-to-learn/rwx/#r-is-for-raging","title":"R is for raging","text":""},{"location":"boost/_old/learn-to-learn/rwx/#w-is-for","title":"W is for ...","text":""},{"location":"boost/_old/learn-to-learn/rwx/#w-is-for-wanting","title":"W is for wanting","text":""},{"location":"boost/_old/learn-to-learn/rwx/#w-is-for-wandering","title":"W is for wandering","text":""},{"location":"boost/_old/learn-to-learn/rwx/#w-is-for-wondering","title":"W is for wondering","text":""},{"location":"boost/_old/learn-to-learn/rwx/#w-is-for-writing","title":"W is for writing","text":""},{"location":"boost/_old/learn-to-learn/rwx/#x-is-for","title":"X is for ...","text":""},{"location":"boost/_old/learn-to-learn/rwx/#x-is-for-experimenting","title":"X is for experimenting","text":""},{"location":"boost/_old/learn-to-learn/rwx/#x-is-for-exploring","title":"X is for exploring","text":""},{"location":"boost/_old/learn-to-learn/rwx/#x-is-for-experiencing","title":"X is for experiencing","text":""},{"location":"boost/_old/learn-to-learn/rwx/#x-is-for-executing","title":"X is for executing","text":""},{"location":"boost/_old/learn-to-learn/rwx/#x-is-for-explaining","title":"X is for explaining","text":""},{"location":"boost/_old/learngo/","title":"\ud83d\udd30 Learn Go - Learn to Code in Go","text":""},{"location":"boost/_old/learngo/#prerequisites","title":"Prerequisites","text":"<ul> <li>Know how to use a computer</li> <li>Type about 40 wpm</li> <li>Helps to know another language (but not required)</li> <li>Know git enough for backing up code (we'll learn the rest)</li> <li>You have a GitHub account</li> <li>Have some way to edit code, preferably own computer</li> <li>Know Markdown enough to maintain own notes repo</li> <li>Have scripted basic POSIX shell, bash (or something)</li> </ul>"},{"location":"boost/_old/learngo/#possible-editors","title":"Possible editors","text":"<ul> <li><code>vim-go</code> from the terminal (my preferred way)</li> </ul>"},{"location":"boost/_old/learngo/#popular-but-not-covering","title":"Popular, but not covering","text":"<ul> <li>Goland</li> <li>VSCode</li> </ul>"},{"location":"boost/_old/learngo/#installing-go","title":"Installing Go","text":"<p>Install it however you want, but make sure it is 1.21+. Note that most of the package managers are way behind on the version.</p> <ul> <li>Run my script (https://raw.githubusercontent.com/rwxrob/dot/main/install/ubuntu/install-go)</li> <li><code>apt install golang-go</code></li> <li><code>brew install go</code></li> </ul>"},{"location":"boost/_old/learngo/#sunday-september-24-2023-14158pm-edt","title":"Sunday, September 24, 2023, 1:41:58PM EDT","text":"<ul> <li>What are \"mnemonic mini-projects\"?</li> <li>What is \"polyglot programming\"?</li> <li>How do I use local module for building?</li> <li>How do I declare/assign and use variables inside/outside blocks??</li> <li>What are all the different ways to declare and assign variables?</li> <li>Are functions types?</li> <li>What are the benefits of \"strongly typed\" languages?</li> <li>What is the difference between a variable and constant?</li> <li>What is the difference between a parameter and an argument?</li> <li>What is a function signature?</li> <li>How can I test my code?</li> <li>How do example-based tests differ and why would they be preferred?</li> </ul>"},{"location":"boost/_old/learngo/#next-week","title":"Next week","text":"<ul> <li>Command-line arguments</li> <li>Environment variables</li> <li>Files</li> </ul>"},{"location":"boost/_old/learngo/week1/","title":"Week 1","text":"<ul> <li>How do I install and setup a Go development environment?</li> <li>How do I initialize a \"go module\"?</li> <li>What are the differences between \"modules\", \"packages\", and \"repos\"?</li> <li>How does an Go application differ from a package?</li> <li>How can I code \"hello world\" in Go?</li> <li>What is the difference between <code>println</code>, <code>fmt.Println</code>, <code>log.Println</code>?</li> </ul>"},{"location":"boost/_old/learngo/week3/","title":"Week 3","text":"<ul> <li>How can I lookup documentation while coding in Vim?</li> <li>How can I look up the source code of a thing while coding in Vim?</li> </ul>"},{"location":"boost/_old/start-taking-notes/","title":"Taking notes","text":""},{"location":"boost/_old/start-taking-notes/#create-a-github-account","title":"Create a GitHub account","text":"<p>What is GitHub and why do I care?</p> <ul> <li>Create a good name<ul> <li>Something you won't be ashamed of in your 30s</li> <li>Use lower case (easier to type and remember)</li> <li>Try to use the same \"handle\" that you use elsewhere</li> <li>Consider not using your real name (if complicated)</li> <li>Use something simple and memorable (this is your brand)</li> </ul> </li> <li>Go follow other members of this years Boost</li> </ul>"},{"location":"boost/_old/start-taking-notes/#create-private-repo-on-github","title":"Create private repo on GitHub","text":"<ul> <li>Why should it be private?</li> <li>Create initial README.md automatically</li> <li>README.md is the default displayed for the repo or directory</li> </ul>"},{"location":"boost/_old/start-taking-notes/#learn-markdown-basics","title":"Learn Markdown basics","text":"<ul> <li>What is Markdown and why do I care?</li> <li>Reduce all Markdown to one best way</li> </ul>"},{"location":"boost/_old/start-taking-notes/#create-one-or-more-markdown-files-using-github-web-interface","title":"Create one or more Markdown files using GitHub web interface","text":""},{"location":"boost/_old/tmux/","title":"How do I use multiple screens from single terminal command-line?","text":""},{"location":"boost/_old/tmux/#my-window-manager-is-tmux","title":"\"My 'Window Manager' is TMUX\"","text":""},{"location":"boost/_old/tmux/#first-there-was-screen","title":"First there was <code>screen</code>","text":""},{"location":"boost/_old/tmux/#running-tmux-inside-tmux","title":"Running TMUX inside TMUX","text":""},{"location":"boost/_old/tmux/#running-tmux-when-terminal-opens","title":"Running TMUX when terminal opens","text":""},{"location":"boost/_old/tmux/#persisting-tmux-sessions","title":"Persisting TMUX sessions","text":""},{"location":"boost/_old/tmux/#sharing-multi-user-tmux-session","title":"Sharing multi-user TMUX session","text":""},{"location":"boost/_old/tmux/#extending-tmux","title":"Extending TMUX","text":""},{"location":"boost/_old/unix/","title":"Index","text":"<ol> <li>Applying the [UNIX Philosophy] to Learning, Life, and Tech</li> <li>[Ken Thompson] Summarizes the UNIX Philosophy</li> <li>[Kevin Henney] Best Describes the UNIX Philosophy</li> <li>Composability, \"Do one thing and do it well\"</li> <li>Communication, \"Write programs to work together\"</li> <li>[Mike Gancarz] Describes the UNIX Philosophy<ol> <li>Small is beautiful.</li> <li>Make each program do one thing well.</li> <li>Build a prototype as soon as possible.</li> <li>Choose portability over efficiency.</li> <li>Store data in flat text files.</li> <li>Use software leverage to your advantage.</li> <li>Use shell scripts to increase leverage and portability.</li> <li>Avoid captive user interfaces.</li> <li>Make every program a filter.</li> </ol> </li> </ol>"},{"location":"boost/archive/2023/","title":"2023 Boost overview","text":"<p>Here's what we currently plan to cover. We always start on May the 4<sup>th</sup> and plan to take approximately 34 weeks with an estimated completion date sometime around January 13, 2024 based on approximately two hours per week (the least we have ever done per week). (Estimate is updated regularly and dynamically from the duration estimated below.)</p> <p>Consider waiting until we are done</p> <p>Some people may find it better to simply wait until the entire 2023 Boost has completed so they can work as fast as they want through the material at their own pace\u2014particularly if you are impatient and have a hard time with the informal, often disorganized way we work through the content.</p>"},{"location":"boost/archive/2023/#manage-your-learning","title":"Manage your learning","text":"<ul> <li>Become an autodidact: learn to manage your own learning. (1h)</li> <li>Take efficient, searchable notes with Markdown on GitHub. (1h)</li> <li>Use search-centric system navigation on Windows, Mac, or Linux. (20m)</li> <li>Grok benefit and origin of terminal command-line interface. (1h)</li> </ul>"},{"location":"boost/archive/2023/#get-linux","title":"Get Linux","text":"<ul> <li>Install and use bash shell on Windows and Mac (besides Linux). (1h)</li> <li>Know why Ubuntu, RedHat, and Alpine are most relevant Linux distros. (20m)</li> <li>Create and access local Ubuntu Linux Server virtual machine with VMware. (2h)</li> <li>Use secure shell (ssh) to safely interact with remote systems. (1h)<ul> <li>Grok public key cryptography</li> </ul> </li> <li>Do things as administrator (root) but only when necessary. (1h)</li> <li>Install, and update software packages with apt. (1h)</li> </ul>"},{"location":"boost/archive/2023/#find-your-way-around","title":"Find your way around","text":"<ul> <li>Get help for any Linux command without the Internet. (20m)</li> <li>Use tab-completion to speed command line input. (20m)</li> <li>Navigate Linux file system and understand general organization. (2h)</li> </ul>"},{"location":"boost/archive/2023/#command-power","title":"Command power","text":"<ul> <li>Capture, append, and connect command input, output, and errors. (1h)</li> <li>Run commands on multiple files using wildcard globbing. (1h)</li> <li>Search and filter text input and files with regular expressions. (2h)</li> <li>Edit text files in-place from the command line. (1h)</li> </ul>"},{"location":"boost/archive/2023/#edit-text-like-a-pro","title":"Edit text like a pro","text":"<ul> <li>Edit text files visually using major terminal editor apps. (4h)</li> <li>Customize ed/ex/vi/vim configuration. (1h)</li> </ul>"},{"location":"boost/archive/2023/#move-to-multiplexer","title":"Move to multiplexer","text":"<ul> <li>Manage terminal windows with screen/tmux. (1h)</li> <li>Customize TMUX configuration. (1h)</li> </ul>"},{"location":"boost/archive/2023/#get-answers-from-the-internet-without-leaving-terminal","title":"Get answers from the Internet without leaving terminal","text":"<ul> <li>Grok Internet networking. (1h)<ul> <li>History<ul> <li>https://youtu.be/qvUYPm2nVXM</li> </ul> </li> <li>Ethernet<ul> <li>Routing</li> <li>Local Area Network (LAN)</li> <li>Wide Area Network (WAN)</li> <li><code>tracepath</code>, <code>traceroute</code>, <code>pathping</code>, <code>tracert</code>, <code>mtr</code></li> <li>Mac address, Ethernet address (machine address)</li> <li>Dynamic Host Control Protocol (DHCP)</li> <li>Network Interface Controller (NIC)</li> <li>Ports</li> <li>Pub door analogy</li> <li>Reserved ports</li> <li><code>netstat</code>, <code>nmap</code>, <code>lsof</code></li> <li>Network Address Translation (NAT)</li> </ul> </li> <li>Firewalls</li> <li>IP</li> <li>TCP/IP</li> <li>UDP</li> <li>Domain names<ul> <li>Registrars</li> <li>Discovery<ul> <li><code>whois</code></li> <li><code>nslookup</code>, <code>dig</code></li> <li>https://shodan.io</li> </ul> </li> <li>localhost 127.0.0.1</li> <li>Reserved</li> <li><code>/etc/hosts</code></li> </ul> </li> <li>HTTP, HTTPS (TLS)</li> <li>Secure Shell<ul> <li><code>~/.ssh/config</code></li> </ul> </li> <li>Beware of legacy: FTP, Telnet, Gopher, IPP</li> </ul> </li> <li>Know the common network query commands. (30m)<ul> <li><code>dig</code>, <code>nslookup</code></li> <li><code>ifconfig</code>, <code>ipconfig</code>, <code>ip</code>, <code>ss</code></li> <li><code>ping</code></li> <li><code>nmap</code></li> <li><code>ncat</code>/<code>nc</code></li> <li><code>iptables</code>, <code>ufw</code></li> </ul> </li> <li>Do effective research from command line with lynx or w3m. (1h)</li> <li>Use <code>curl</code> and <code>wget</code> to fetch data and files from command line. (20m)</li> <li>Leverage command history using terminal editor actions to save time. (20m)</li> <li>Customize lynx configuration. (1h)</li> <li>Send AI (ChatGPT) queries from the command line. (1h)</li> </ul>"},{"location":"boost/archive/2023/#find-files-and-vulnerabilities-like-a-hacker","title":"Find files (and vulnerabilities) like a hacker","text":"<ul> <li>Find specific files anywhere and determine what they are. (1h)</li> <li>Use symbolic links. (10m)</li> <li>Create a <code>tripwire</code> program to catch hackers (see what changed). (2h)</li> </ul>"},{"location":"boost/archive/2023/#start-building-your-terminal-toolkit","title":"Start building your terminal toolkit","text":"<ul> <li>Grok the benefit of creating and maintain your own, portable toolkit. (20m)</li> <li>Organize commands and start your own \"dot files\" GitHub repo. (1h)</li> <li>Organize git repositories. (20m)</li> <li>Save source to GitHub with <code>git</code> and <code>gh</code> (with <code>ssh</code> keys). (1h)</li> <li>Understand and manipulate Linux file ownership and permissions. (1h)</li> <li>Understand implications of different shell scripting languages. (30m)</li> <li>Write first POSIX-compliant shell script. (30m)</li> <li>Check your scripts are safe with <code>shellcheck</code>. (20m)</li> <li>Automatically format shell scripts with <code>shfmt</code>. (20m)</li> <li>Manage processes (programs currently running). (1h)</li> <li>Grok UNIX philosophies and use UNIX filters over plugins. (20m)</li> <li>Understand ASCII, terminal encoding, and escape sequences. (30m)</li> <li>Customize bash profile and environment. (1h)</li> <li>Grok and apply everything in the bash manual page (man bash). (4h)</li> <li>Do math in the shell safely and reliably with bc and dc. (1h)</li> <li>Parse JSON with jq. (1h)</li> <li>Parse YAML with yq. (1h)</li> <li>Master parsing other delimited formats. (30m)</li> <li>Grok bases, binary, octal, decimal, and hexadecimal. (20m)</li> <li>Try a little Python. (2h)</li> <li>Try a little Go. (2h)</li> </ul>"},{"location":"boost/archive/2023/#learn-just-enough-web-dev","title":"Learn just enough Web dev","text":"<ul> <li>Know how much Web dev is expected from all techies (20m)</li> <li>Learn enough HTML to grok Markdown rendering (1h)</li> <li>Learn enough CSS to make rendered Markdown pretty (1h)</li> <li>Learn enough vanilla JavaScript to add occasional widget (1h)</li> <li>Don't bother learning any \"frameworks\" (for now) (20m)</li> <li>Use only the best Web dev learning resources (20m)</li> <li>Understand PWAs and what it means to be \"progressive\" (20m)</li> <li>Use <code>zet</code> (or something like it) to publish your live notes (1h)</li> <li>Create a static site generator with <code>pandoc</code> and 10-lines of bash (1h)</li> <li>Document anything with MkDocs (2h)</li> <li>Publish to Web automatically with GitHub pages (30m)</li> <li>Publish to Web automatically with Netlify (30m)</li> <li>Learn to leverage Go text and HTML templates (30m)</li> </ul>"},{"location":"boost/archive/2023/#become-employable","title":"Become employable","text":"<ul> <li>Grok that employment is about trust and people, not positions. (20m)</li> <li>Network and foster a professional learning network/community. (1h)<ul> <li>Grow neck beard (where possible) lol.</li> <li>\"Strong opinions, weakly/weekly held.\"</li> </ul> </li> <li>Start listening for opportunities now. (20m)</li> <li>Forget about LinkedIn. (20m)</li> <li>Complete GitHub profile page and grok job discovery from GitHub. (1h)</li> <li>Create and maintain a consumable, sustainable resume. (2h)<ul> <li>Don't call yourself a \"junior\"</li> <li>Job titles are mostly bullshit (too bad no role-based employment)</li> </ul> </li> <li>Target occupations you want and start applying. (1h)<ul> <li>How much salary do I actually need?</li> </ul> </li> </ul>"},{"location":"boost/archive/2023/#have-a-strategy-for-what-comes-next","title":"Have a strategy for what comes next","text":"<ul> <li>Know when and how to certify and why you might want to add it. (1h)</li> <li>Set healthy work boundaries and self-care habits. (1h)</li> </ul>"},{"location":"boost/archive/2023/#pay-it-forward-1h","title":"Pay it forward! (1h)","text":"<ul> <li>Remember where you were. (20m)</li> <li>Become a mentor. (20m)</li> <li>Never stop learning. (20m)</li> </ul>"},{"location":"boost/archive/2023/#what-wont-we-learn-here","title":"What won't we learn (here)?","text":"<p>There's a lot of stuff to learn and eventually we do hope to cover it in one of the other learning series we have planned. This is a place to capture that stuff when we think of it.</p>"},{"location":"boost/archive/2023/#polyglot-programming","title":"Polyglot Programming","text":"<p>Learning to code in shell/bash is included in the Boost (since using a Linux terminal command line is coding so might as well learn all of it). The Boost also includes web design basics (Markdown, HTML, CSS) in order to create and format personal profile page and documentation.</p> <p>All other programming languages have their own series that rotates annually in parallel to the Beginner Boost. The languages we learn rotate in the following order:</p> <ul> <li>Go</li> <li>Python</li> <li>JavaScript + Typescript</li> <li>C</li> </ul>"},{"location":"boost/archive/2023/#homelab-init","title":"Homelab Init","text":"<ul> <li>How to create and work with containers</li> <li>How to create micro-services</li> <li>How to interact with Web APIs</li> <li>How to setup a local VLAN</li> <li>How to setup and manage own DNS server</li> <li>How to safely tunnel web-facing services through external providers</li> <li>How to setup on-prem vanilla Kubernetes cluster</li> <li>How to setup local virtual machine hosting with QEMU/libvirt</li> </ul>"},{"location":"boost/archive/2023/#professional-git-and-github-usage","title":"Professional Git and GitHub usage","text":"<ul> <li>Forking and modifying</li> <li>Branching and merging</li> <li>Issue-driven pull requests</li> <li>Locking <code>main</code>/<code>master</code> branch</li> <li>Licensing issues</li> <li>Release management</li> <li>GitHub Actions</li> <li>Continuous Integration</li> <li>Continuous Deployment</li> <li>GitOps</li> <li>Dockerfile container image creation</li> </ul>"},{"location":"boost/archive/2023/quick/","title":"2023 Boost - Quick Start","text":"<p>UPDATE: WSL blew up destroying <code>podman</code> so we will never be using it again. The Boost returns to using a virtual machine (as in 2022). See Week 9 instead of the quick-start below for how to set that up.</p> <p>\ud83d\udcfa https://youtu.be/Nfq26YHssj8</p> <p>Start learning Linux and containers now. Whether you are coming into the Boost late and want to catch up to keep up with live streams or you just want to get Linux on your local computer as fast as possible here is the fastest way to get started. (If you want to see all three hours of this ws-skilstak container image being created see the related video in the same playlist.)</p> <ol> <li>Install terminal software<ul> <li>Mac: iTerm2</li> <li>Windows: Terminal Preview</li> </ul> </li> <li>Install bash<ul> <li>Mac: install brew (then) <code>brew install bash</code></li> <li>Windows: install git-bash</li> </ul> </li> <li>Install Podman Desktop</li> <li>Initialize and start the podman virtual machine<ul> <li>Open bash terminal command line</li> <li><code>podman machine list</code></li> <li><code>podman machine init</code></li> <li><code>podman machine start</code></li> </ul> </li> <li> <p>Pull and run a container from SKILSTAK workspace image</p> <pre><code>podman run -it --hostname skilstak --name boost -v shared://shared ghcr.io/rwxrob/ws-skilstak\n</code></pre> </li> <li> <p>Use <code>exit</code> to exit container</p> </li> <li>Reattach to container later<ul> <li><code>podman start -a boost</code></li> </ul> </li> </ol>"},{"location":"boost/archive/2023/week0/","title":"2023 Boost - Week 0","text":"<p>\ud83d\udcfa https://youtu.be/b9dHxF5UKzA</p> <p>Welcome to the 2023 Beginner Boost! Officially, the first technical content will be Week 1 (next Saturday) but here we go over why you might want to do the Boost, who it is for, the goals and motivation for doing it, the schedule, and what you'll need to begin.</p> <p>00:00     Start 0:28      Logistics. 2:00      Streaming schedule outside of the boost. 2:37      Best way to support the beginner boost. 4:38      Content that will be produced across YouTube and Twitch. 9:45      What is skilstak? 15:15    May the 4<sup>th</sup> be with you. 15:57    Nature of learning. 17:56    Paulo Freire. 36:15    Sir Ken Robinson. 37:25    Aaron Swartz. 52:00    Break 1. 54:25    Discuss Boost schedule, skilstak.io/boost/ and boost Discord. 58:00    Podman desktop. 1:00:26 Installing Linux on hardware is not included in this boost. 1:01:48 Docker desktop. 1:04:17 Difference between a virtual machine and container. 1:07:28 Hardware requirements. 1:10:16 Content overview for the boost. 1:43:00 Targeted careers. 2:00:04 Legal usage. 2:01:21 RWX method. 2:26:24 What to do next. 2:33:21 Recap.  </p>"},{"location":"boost/archive/2023/week1/","title":"2023 Boost - Week 1","text":"<p>\ud83d\udcfa https://youtu.be/cE-kkVwz0Xg</p> <p>This week we start taking notes in basic Markdown on GitHub and connect with others doing the Boost. Then we go over the core applications that must be installed next week: bash shell, a good terminal, and Podman desktop.</p> <ol> <li>Create a GitHub account<ol> <li>Pick a good, short, memorable name suitable for work</li> <li>Find and follow some other friends from Boost</li> <li>Create a private repo to contain notes from Boost with README.md</li> </ol> </li> <li>Learn basic Markdown<ol> <li>Focus on one best way for consistency</li> <li>Practice using your new README.md in repo of notes</li> <li>Started taking notes from GitHub GUI</li> </ol> </li> <li>Install bash<ol> <li>Install git-bash on Windows</li> <li>Install brew and then brew install bash on mac</li> </ol> </li> <li>Install a better terminal application<ol> <li>Install Windows Terminal Preview on Windows</li> <li>Install iTerm2 on Mac</li> <li>Customize themes and colors to your preferences</li> <li>Perhaps install and explore VSCode a bit to see as well</li> </ol> </li> <li>Install Podman Desktop (with WSL2 extension if prompted)<ol> <li>Start exploring <code>podman</code> command from terminal</li> </ol> </li> </ol>"},{"location":"boost/archive/2023/week10/","title":"2023 Boost - Week 10","text":"<p>\ud83d\udcfa https://youtu.be/h9giUXQ16To</p> <ol> <li>How do I customized Vi/Vim?</li> <li>What is the difference between Vi and Vim configuration?</li> <li>What is VimScript and should I learn it? (Why not Lua?)</li> <li>What goes into .vimrc and what does it do?</li> <li>How do I download files from the Internet from command line?</li> <li>What is the .vim directory used for?</li> <li>How can I add coding language support (Go, Python, bash, etc.)?</li> <li>How can I transfer my customizations to another computer?</li> </ol>"},{"location":"boost/archive/2023/week11/","title":"2023 Boost - Week 11","text":"<p>\ud83d\udcfa https://youtu.be/Tgct-GlBUM4</p> <ol> <li>What is a \"multiplexer\" and why should I care?</li> <li>How do I install, configure and use screen?</li> <li>Why should I use tmux? What's the difference between screen and tmux?</li> <li>How do I install, configure, and use tmux?</li> <li>How can I extend tmux?</li> <li>Why not use Vim panes instead?</li> </ol> <p>Related:</p> <ul> <li>https://tmuxguide.readthedocs.io/en/latest/tmux/tmux.html</li> </ul>"},{"location":"boost/archive/2023/week12/","title":"2023 Boost - Week 12","text":"<p>\ud83d\udcfa https://youtu.be/1Xjznp9thuw</p> <ol> <li>Why search the Web from the terminal?</li> <li>Isn't it slower to search from the terminal?</li> <li>What if a page needs images or JavaScript to be understood?</li> <li>What is the difference between <code>lynx</code> and <code>w3m</code>?</li> <li>Can I get answers from ChatGPT from the command line?</li> <li>What else can I query from the command line using <code>curl</code>?</li> </ol> <p>Related:</p> <p>https://github.com/rwxrob/dot</p>"},{"location":"boost/archive/2023/week13/","title":"2023 Boost - Week 13","text":"<p>\ud83d\udcfa https://youtu.be/dJPJTKhvkBA</p> <ul> <li>Grok Internet networking.<ul> <li>History<ul> <li>https://youtu.be/qvUYPm2nVXM</li> </ul> </li> <li>Ethernet<ul> <li>Routing</li> <li>Local Area Network (LAN)</li> <li>Wide Area Network (WAN)</li> <li><code>tracepath</code>, <code>traceroute</code>, <code>pathping</code>, <code>tracert</code>, <code>mtr</code></li> <li>Mac address, Ethernet address (machine address)</li> <li>Dynamic Host Control Protocol (DHCP)</li> <li>Network Interface Controller (NIC)</li> <li>Ports</li> <li>Pub door analogy</li> <li>Reserved ports</li> <li><code>netstat</code>, <code>nmap</code>, <code>lsof</code></li> <li>Network Address Translation (NAT)</li> </ul> </li> <li>Firewalls</li> <li>IP</li> <li>TCP/IP</li> <li>UDP</li> <li>Domain names<ul> <li>Registrars</li> <li>Discovery<ul> <li><code>whois</code></li> <li><code>nslookup</code>, <code>dig</code></li> <li>https://shodan.io</li> </ul> </li> <li>localhost 127.0.0.1</li> <li>Reserved</li> <li><code>/etc/hosts</code></li> </ul> </li> <li>HTTP, HTTPS (TLS)</li> <li>Secure Shell<ul> <li><code>~/.ssh/config</code></li> </ul> </li> <li>Beware of legacy: FTP, Telnet, Gopher, IPP</li> </ul> </li> <li>Know the common network query commands.<ul> <li><code>dig</code>, <code>nslookup</code></li> <li><code>ifconfig</code>, <code>ipconfig</code>, <code>ip</code>, <code>ss</code></li> <li><code>ping</code></li> <li><code>nmap</code></li> <li><code>ncat</code>/<code>nc</code></li> <li><code>iptables</code>, <code>ufw</code></li> </ul> </li> </ul>"},{"location":"boost/archive/2023/week14/","title":"2023 Boost - Week 14","text":"<p>\ud83d\udcfa https://youtu.be/LCRm_WOxh-8</p> <ul> <li><code>ls</code></li> <li><code>touch</code></li> <li><code>type</code></li> <li><code>file</code></li> <li><code>which</code></li> <li><code>command</code></li> <li><code>ln</code></li> <li><code>chmod</code></li> </ul>"},{"location":"boost/archive/2023/week15/","title":"2023 Boost - Week 15","text":"<p>\ud83d\udcfa https://youtu.be/LhMj51fpqeQ</p> <ul> <li>What's a shell and why do I care?</li> <li>Which shell should I use?</li> <li>What is the difference between an interactive shell and shell scripting?</li> <li>What is the difference between GPLv2 and GPLv3 licenses?</li> <li>Everyone should use <code>shellcheck</code>.</li> <li>Dynamic <code>shellcheck</code> with Vim Ale.</li> <li>Getting started coding POSIX shell and bash.</li> <li>Coding your own <code>tripwire</code> program to catch hackers (in 20 lines of shell code).</li> <li>The find command, perhaps the least appreciated in all of UNIX.</li> </ul> <p>Here's our example from the session. Play around with it to get good with <code>find</code> and regular expressions.</p> <pre><code>#!/bin/sh\n\nrootdir='/'\n\nexclude=\\\n'container|cache|'\\\n'\\/[a-f0-9]{3,}_0|'\\\n\"^$HOME\"\\\n'/.(bash_history|viminfo|.cache/google)'\n\ninclude='^/(etc|dev)'\n\n# Use find to get all files that have changed since a specific time.\n#   0 mean last 24 hours\n#   1 means 24-48 hours\n\nfind \"$rootdir\" -type f -mtime 0 2&gt;/dev/null | \\\n  grep -E \"$include\" | \\\n  grep -E -v \"$exclude\"\n</code></pre>"},{"location":"boost/archive/2023/week16/","title":"2023 Boost - Week 16","text":"<p>\ud83d\udcfa https://youtu.be/8-xdn_ScMjs</p> <p>Get good with Git basics so we have a way to backup our code and notes. To use Git, however, we have to learn a little about public-key cryptography and secure shell (but not too much).</p> <ul> <li>What is the best Git learning resource?</li> <li>Just how much Git and GitHub do I need to learn?</li> <li>How does SSH apply to Git and GitHub?</li> <li>What is \"public key cryptography\" and why do I need to care?</li> <li>How do I create an \"SSH public key\" for GitHub?</li> <li>How do I create a repository (repo) and clone it locally?</li> <li>How do I add new stuff to the repo?</li> <li>How do I save (commit) stuff to the repo?</li> <li>How can I restore local changes (if I deleted file, for example)?</li> <li>How do I \"introduce myself\" to Git?</li> <li>How do I push my changes to GitHub?</li> </ul>"},{"location":"boost/archive/2023/week17/","title":"2023 Boost - Week 17","text":"<p>Let's jump into basic programming\u2014specifically procedural programming. We'll use POSIX shell and bash as our first programming language (as odd as that sounds).</p> <ul> <li>Why learn shell as a first programming language?</li> <li>How can I create a program/script?</li> <li>What are some differences between bash and shell?</li> <li>What is syntax?</li> <li>What is a \"string\"?</li> <li>What is a carriage return and a line feed?</li> <li>Why does ! have special meaning to the shell?</li> <li>How do I \"escape\" a backslash?</li> <li>What is an \"argument\"?</li> <li>What is a \"variable\"?</li> <li>What are \"environment variables\" (or \"system variables\")?</li> <li>How do I use comments in shell code?</li> <li>What happens when I add multiple arguments to <code>printf</code>?</li> <li>How do I display the size and panes in TMUX?</li> <li>What are \"fields\" and \"delimiters\"?</li> <li>How do I pass data and variables into my program?</li> <li>What are \"parameters\"?</li> <li>How do I get the first argument into my program?</li> <li>How can I join a variable immediately preceding a string?</li> </ul>"},{"location":"boost/archive/2023/week18/","title":"2023 Boost - Week 18","text":"<p>Procedural programming fundamentally implies performing individual tasks or grouped together into procedures and functions into which values can be passed as arguments into parameters.</p> <ul> <li>What does the word \"procedure\" mean?</li> <li>What happens when I add a script into PATH that isn't executable?</li> <li>What does \"hashed\" mean?</li> <li>How can I read about the hash shell builtin command?</li> <li>How can I force shell to not remember hashed executables?</li> <li>How can I easily repeat a command and watch output?</li> <li>How do I group several commands together?</li> <li>What does the word \"procedure\" mean?</li> <li>What is the difference between a \"procedure\" and a \"function\"?</li> <li>How should I format my shell code?</li> <li>How do I pass in all the arguments from the command line?</li> <li>What is the difference between <code>$@</code> and <code>$*</code>?</li> <li>What are return values and when should I care about them?</li> <li>What does <code>$?</code> contain?</li> </ul> <p>Related:</p> <ul> <li>https://google.github.io/styleguide/shellguide.html</li> </ul>"},{"location":"boost/archive/2023/week19/","title":"2023 Boost - Week 19","text":"<p>Tasks of a procedure or function are sometimes based on certain conditions (called \"state\" formally). Some people call this \"flow control\" or \"boolean logic\" since true or false conditions dictate what happens. Hence another name \"conditional programming\". Think \"if-then\" (instead of, for example, \"when-then\").</p> <ul> <li>What is the difference between <code>printf</code> and <code>echo</code>?</li> <li>How do I limit what happens based on different values?</li> <li>What are conditionals?</li> <li>Should I use tabs or spaces in shell code indentation?</li> <li>How can I combine multiple conditional checks?</li> <li>Why should double brackets always be used in bash?</li> <li>How do I prompt the user to type something in?</li> <li>When and why would you not want to prompt the user?</li> <li>How can I change the colors of text and user input?</li> </ul>"},{"location":"boost/archive/2023/week2/","title":"2023 Boost - Week 2","text":"<p>\ud83d\udcfa https://youtu.be/0gNR6qj87a0</p> <p>This week we learn about terminal and command line interfaces, containers and virtual machines and start using Podman Desktop and podman command for the first time.</p> <ol> <li>Use command search to open a bash terminal (in full screen if prefer)</li> <li>What's a command line? Shell?<ol> <li>What's a prompt?<ol> <li>Why simple prompts are best?</li> </ol> </li> <li>What's a command?</li> <li>What is a REPL?</li> <li>What's an argument?</li> <li>What is a switch, flag, and/or  option?</li> <li>Difference between \"terminal\" and \"command line\"</li> </ol> </li> <li>What's a file system? Directory?<ol> <li>Rooted node tree data structure</li> <li>\"Everything is a file in UNIX/Linux\" (inode specifically)</li> </ol> </li> <li>Learn bash shell navigation?<ol> <li><code>exit</code> - exit the current shell</li> <li><code>pwd</code> - print working directory (show where you are)</li> <li><code>clear</code> - clear the screen</li> <li><code>ls</code> - list files and directories<ol> <li>Current directory</li> <li>Parent directories</li> <li>Sub-directories</li> <li>Globing</li> </ol> </li> <li><code>cd</code> - change directory</li> <li><code>which</code> - see which command will be run (if available)</li> <li>How can I find help? <code>-h</code>, <code>man</code>, <code>info</code>, <code>help</code>, <code>apropos</code>, <code>whatis</code></li> </ol> </li> <li>What's a container?<ol> <li>... compared to a virtual machine?</li> </ol> </li> <li>Create hub.docker.io and/or quay.io account (if needed)</li> <li>Start Podman Desktop GUI<ol> <li>Pull an image</li> <li>Start a container</li> <li>Open a terminal to the container</li> <li>Understand equivalents from a command line</li> </ol> </li> <li>Run a new temporary container with <code>podman</code> command<ol> <li><code>ubuntu</code></li> <li><code>busybox</code></li> <li><code>alpine</code></li> <li><code>archlinux</code></li> <li><code>kalilinux/kali-rolling</code></li> <li><code>redhat/ubi8-minimal</code></li> <li><code>gentoo/stage3</code></li> </ol> </li> </ol>"},{"location":"boost/archive/2023/week20/","title":"2023 Boost - Week 20","text":"<ul> <li>How can I match a partial or substring in shell/bash?</li> <li>What is \"parameter expansion\" and how does it differ in shell/bash?</li> <li>How do I force a string into all lower/upper case?</li> <li>How do I clear the screen?</li> <li>How do I capture the output of a command into a variable?</li> <li>How can I translate/convert characters in a string?</li> <li>How are ASCII characters ordered?</li> <li>What is the difference between a \"letter\", \"character\", and a \"rune\"?</li> <li>How do \"pattern matching\" and \"regular expressions\" differ?</li> <li>How do I match a single character in \"pattern matching\"?</li> <li>How do I match zero or more characters in \"pattern matching\"?</li> <li>How do I match a range of characters in \"pattern matching\"?</li> <li>How do I match a class of characters in \"pattern matching\"?</li> <li>How do I negate a range in \"pattern matching\"?</li> <li>How do I use regular expressions with shell/bash?</li> </ul>"},{"location":"boost/archive/2023/week21/","title":"2023 Boost - Week 21","text":"<ul> <li>Where can I read about loops and math in shell and bash?</li> <li>How do I repeat something one or more times?</li> <li>How can a counter be added to my loops?</li> <li>How do POSIX shell and bash shell differ regarding for loops?</li> <li>What is variable \"scope\"?</li> <li>What do \"declare\" and \"local\" mean? How are they different?</li> <li>How can we use a function to refactor our code to read more easily?</li> <li>What are the key differences betwen for and while loops?</li> <li>How are math operators and values different in shell from other languages?</li> </ul>"},{"location":"boost/archive/2023/week22/","title":"Week22","text":"<ul> <li>How do I read an entire file into a variable?</li> <li>How do I do something to every line of a file?</li> <li>What is \"parameter expansion\" and how can I use it?</li> </ul>"},{"location":"boost/archive/2023/week3/","title":"2023 Boost - Week 3","text":"<p>\ud83d\udcfa https://youtu.be/mUmQk1o6FFs</p> <p>(PLEASE SKIP TO WEEK 4.) This week we setup an Ubuntu Linux container image using podman command and apt package manager, learn how to save (commit) an image copy so we have backups during our setup, and how to navigate the command line.</p> <ol> <li>Why Ubuntu?</li> <li>Pull an Ubuntu Linux image into podman images</li> <li>Create (run) a named container from the Ubuntu local image</li> <li>Exit the container</li> <li>Understand difference between running and exited containers</li> <li>Use \u2013rm for temporary containers</li> <li>Use podman ps -a to show all containers (running and exited)</li> <li>Use podman rm to remove unwanted containers</li> <li>Use bash tab completion to save on typing</li> <li>Use up and down arrows (for now) to get previous commands</li> <li>Restart and attach to named container</li> <li>Use Advanced Package Manager (APT)</li> <li>Use <code>apt update</code> command to refresh list of packages</li> <li>Clear the screen with clear command (not control-L)</li> <li>Install documentation helpers</li> <li>Use man to get help about commands</li> <li>Use help to get help about bash builtins</li> <li>Look for runnable stuff<ol> <li>Use which command</li> <li>Use type builtin</li> <li>Use command -v command</li> <li>Use file command to see what type of thing it is</li> </ol> </li> <li>Everything is a file (inode) even directories<ol> <li>Use ls command</li> <li>Use pwd command</li> <li>Use cd to change directories</li> <li>Use chmod to change permissions</li> <li>Use chown to change owner (and group)</li> </ol> </li> <li>Add new user with adduser (or useradd)</li> <li>Delete user with deluser (or userdel)</li> <li>Add new group with addgroup (or groupadd)</li> <li>Delete group with delgroup (or groupdel)</li> <li>Commit (save) container as image</li> <li>Push saved image to GitHub Container Registry<ol> <li>Create Personal Access Token on GitHub</li> <li>Use podman push to push local image to remote ghcr.io</li> <li>View saved GitHub packages (containers)</li> </ol> </li> </ol>"},{"location":"boost/archive/2023/week4/","title":"2023 Boost - Week 4","text":"<p>\ud83d\udcfa https://youtu.be/SPoqW1CMEhY</p> <p>Let's do this again. Weeks 2 and 3 were a little harder than most beginners might be able to handle. Most Linux users will be using a Linux that has been installed already. The Boost is primarily intended for them (not admins and hackers, who are also users). So we've prepared a quick-start with an existing Linux container image. Here's how to get it and another take at how to get going without having to setup anything.</p> <ol> <li>What concepts do all users need to understand?</li> <li>What does it mean to be a Linux \"user\" (vs \"admin\" or \"hacker\")?</li> <li> <p>Create a local Linux container for the Boost</p> <pre><code>podman run -it --hostname skilstak --name boost -v shared://shared ghcr.io/rwxrob/ws-skilstak\n</code></pre> </li> <li> <p>What is the difference between a terminal and a command line?</p> </li> <li>What do the parts of the prompt mean?</li> <li>How do I clear the screen?<ul> <li>Do not depend on Control-L</li> <li><code>clear</code> (or <code>c</code>)</li> </ul> </li> <li>How do I see where I am?<ul> <li><code>pwd</code></li> </ul> </li> <li>How do I see everything in this directory?<ul> <li><code>ls -al</code></li> </ul> </li> <li>How do get help information about a command?<ul> <li><code>CMD -h</code> or <code>CMD --help</code></li> <li><code>man CMD</code></li> <li><code>help CMD</code></li> <li><code>apropos KEYWORD</code> (if you want)</li> </ul> </li> <li>What is a directory and what is a file?</li> <li>What are special directories?<ul> <li>current: <code>.</code></li> <li>parent: <code>..</code></li> <li>previous: <code>-</code></li> <li>home: <code>~</code></li> </ul> </li> <li>How do I change directories?<ul> <li><code>cd DIR</code></li> <li><code>cd -</code></li> <li><code>cd ..</code></li> <li><code>cd</code></li> </ul> </li> <li>How do I see what's in a file?<ul> <li><code>cat FILE [FILE]</code></li> <li><code>tac FILE [FILE]</code></li> <li><code>more FILE</code></li> <li><code>less FILE</code></li> <li><code>head FILE</code></li> <li><code>tail FILE</code></li> </ul> </li> <li>What is a file descriptor and how do I use them?<ul> <li>Understand origins of TTY (teletype machines)</li> <li>standard input (<code>/dev/stdin</code>, 0)</li> <li>standard output (<code>/dev/stdout</code>, 1)</li> <li>standard error (<code>/dev/stderr</code>, 2)</li> </ul> </li> <li>What is a pipe?<ul> <li><code>ls -al | more</code></li> </ul> </li> <li>How do write output of a command to a file?<ul> <li><code>ls -al &gt; /tmp/foo</code></li> </ul> </li> <li>How do I append command output to end of a file?<ul> <li><code>echo some &gt;&gt; /tmp/foo</code></li> <li><code>echo thing &gt;&gt; /tmp/foo</code></li> </ul> </li> <li>How do I zero out an existing or new file?<ul> <li><code>&gt; /tmp/foo</code></li> </ul> </li> <li>How do I create a new file (or update time changed)?<ul> <li><code>touch /tmp/foo</code></li> </ul> </li> <li>How do I remove a file?<ul> <li><code>rm FILE</code></li> </ul> </li> <li>How do I find files with a keyword in the name?<ul> <li><code>find . -name '*vim*' 2&gt; /dev/null</code></li> </ul> </li> <li>How do I send stderr to stdout as well?<ul> <li><code>find / -name '*md*' 1&gt; /tmp/foo 2&gt; /dev/stdout</code></li> <li><code>find / -name '*md*' &gt; /tmp/foo 2&gt; /dev/stdout</code></li> <li><code>find / -name '*md*' &gt; /tmp/foo 2&gt;&amp;1</code></li> <li><code>find / -name '*md*' &amp;&gt; /tmp/foo</code></li> </ul> </li> </ol>"},{"location":"boost/archive/2023/week5/","title":"2023 Boost - Week 5","text":"<p>\ud83d\udcfa https://youtu.be/ZcEIJFbHRn4</p> <p>This week we do \"destructive\" file system stuff related and take a lot of time to review the most common dangers. Watch this is you want to keep your job once you get it.</p> <ol> <li> <p>How do I create a new directory?</p> <pre><code>mkdir NAME\n</code></pre> </li> <li> <p>How do I \"hide\" a file or directory?</p> <p>Give it a dot (<code>.</code>) as the first character in name.</p> </li> <li> <p>How do I move or rename a file or directory?</p> <p><code>mv OLD NEW</code></p> <p>Danger</p> <p>Be very careful when moving and renaming since you can easily clobber an existing file or directory. Don't bother with activating <code>noclobber</code> because it will get in your way more than help you, just become aware/paranoid about the danger.</p> </li> <li> <p>How do I move multiple files into a single directory?</p> <pre><code>mv SOURCE... DIR\n</code></pre> <p>SOURCE can be a file, directory (or path to) or a glob.</p> <p>Danger</p> <p>When moving muliple SOURCEs make sure that DIR is a directory and not a file.</p> <p>Note</p> <p>Note that <code>mv</code> sometimes will not work because the source and destination are on different file systems.</p> </li> <li> <p>How do I list properties of a directory (instead of contents)?</p> <pre><code>ls -lda DIR\n</code></pre> </li> <li> <p>How do I safely avoid typing long or complicated names?</p> <p>Tap tab (once or twice) for tab completion.</p> </li> <li> <p>How do I remove a file?</p> <pre><code>rm FILE\n</code></pre> <p>Tip</p> <p>When working with destructive commands that operate on many files try <code>ls</code> first to make sure it only affects the files you want.</p> </li> <li> <p>How do I create a temporary container (sandbox) just to try dangerous (stupid) things?</p> <pre><code>podman run -it --rm ghcr.io/rwxrob/ws-skilstak\n</code></pre> </li> <li> <p>How do I remove a directory?</p> <pre><code>rmdir DIR\n</code></pre> <p>Note</p> <p>Prefer <code>rmdir</code> over alternatives to force yourself to be sure of each individual thing that is being deleted within that directory (since <code>rmdir</code> will not remove directories containing).</p> </li> <li> <p>How do I remove a directory and everything under it recursively?</p> <pre><code>rm -rf DIR\n</code></pre> <p>Danger</p> <p>Even though this command does not work on significant system directories (like <code>/</code>) it is very recursively destructive and should almost never be used. Use <code>rmdir</code> instead.</p> </li> <li> <p>How do I recover a broken or deleted configuration file?</p> <pre><code>cp /etc/skel/FILE ~\n</code></pre> </li> <li> <p>How do I start a new shell and replace the currently running one?</p> <pre><code>exec bash -l\n</code></pre> </li> <li> <p>How do I copy a file?</p> <pre><code>cp FILE NEWNAME\n</code></pre> </li> <li> <p>How do I recusively copy a directory and subdirectories?</p> <pre><code>cp -r SOURCE.. DIR\n</code></pre> <p>Note</p> <p>This creates new files with new creation dates/times and ownership if copying from another user. Use other <code>cp</code> argument options when preserving them is important.</p> </li> </ol>"},{"location":"boost/archive/2023/week6/","title":"2023 Boost - Week 6","text":"<p>This week is focused on text file filtering, transformation, sorting, and editing in-place (without a terminal editor). We also introduce the ed, the \"standard UNIX terminal editor\" (so that we can better understand commands and editors that have been derived from it).</p> <p>\ud83d\udcfa https://youtu.be/iwxh9w1AGIc</p> <ol> <li>What is the difference between a carriage return and line return?</li> <li>How do I print a carriage return in output?</li> <li>What is the difference between <code>echo</code> and <code>printf</code>?</li> <li>What is a \"string\"?</li> <li>What's POSIX and why do I care?</li> <li>How do I filter out only certain lines of a file?</li> <li>How do I search within a file from command line?<ul> <li><code>grep</code></li> <li><code>bash</code> while loop (but we'll cover that later)</li> </ul> </li> <li>What are \"regular expressions\" and why do I care?</li> <li>What is the difference between \"basic\" and \"extended\" regex?</li> <li>How do I ensure I'm always using \"extended\" regex?</li> <li>What is a \"field\"?</li> <li>What is \"white space\"?</li> <li>How do I limit output to just the n-th column?<ul> <li><code>awk</code></li> </ul> </li> </ol>"},{"location":"boost/archive/2023/week7/","title":"2023 Boost - Week 7","text":"<p>\ud83d\udcfa https://youtu.be/3xcBlioFXA8</p> <ol> <li>How do I run the latest version of SKILSTAK Linux?</li> <li>How do I sort lines of output?</li> <li>How do I determine which lines are unique in output?</li> <li>What is lexicographical/lexical sorting?</li> <li>Why is _ considered a letter?</li> <li>How do I count the number of unique lines of output?</li> <li>How do I count lines, characters, and bytes of a file?</li> <li>What is the difference between a TUI and CLI?</li> <li>How do I edit a file from the terminal?</li> <li>How do I edit a file using the <code>ed</code> editor?</li> <li>How do I change content of lines of output from command line?</li> <li>How do I change content of a file in place from command line?</li> </ol> <p>Related:</p> <ul> <li>https://www.redhat.com/sysadmin/introduction-ed-editor</li> </ul>"},{"location":"boost/archive/2023/week8/","title":"2023 Boost - Week 8","text":"<p>\ud83d\udcfa https://youtu.be/YxrMiXe4KRw</p> <ol> <li>Do I need to learn a terminal editor when just planning on writing software?</li> <li>What terminal editors are available for UNIX/Linux?<ul> <li><code>ed</code>, <code>ex/vi/nvi</code>, <code>vim/nvim</code>, <code>nano/pico/joe</code>, <code>emacs</code></li> </ul> </li> <li>Which terminal editor should I use?</li> <li>How should I get started learning <code>vim</code>?</li> </ol> <p>Related:</p> <ul> <li>https://rwx.gg/visurvive</li> <li>https://rwx.gg/vi</li> <li>https://rwx.gg/vimagic</li> <li>http://vimgenius.com</li> </ul>"},{"location":"boost/archive/2023/week9/","title":"2023 Boost - Week 9","text":"<p>\ud83d\udcfa https://youtu.be/stvgDpx5T9Y</p> <ol> <li>What is the difference between virtual machines and containers?</li> <li>Should I use a virtual machine or a container for my workspace?</li> <li>How can I get started using Linux in a virtual machine?</li> <li>Which virtual machine software is best for beginners?</li> <li>Which Linux distribution (distro) is best for beginners?</li> <li>Should I install Linux on a computer to learn Linux?</li> </ol> <p>Bonus challenge:</p> <ul> <li>Install another operating system using VMWare Player (PopOS!, Kali, Arch, Nix, etc.)</li> </ul>"},{"location":"schedule/","title":"Rotating Beginner Boost annual schedule","text":"<p>Our annual schedule begins and ends on May the 4<sup>th</sup> every year. On that day we kick off the SKILSTAK Beginner Boost series. Currently, the plan is to do two 45-minute sessions back to back (100 minutes total with break) every week generally on the same day.</p> <ol> <li>18-20: [JOB] Start a career in tech (3 weeks)</li> <li>21-25: [WEB] Create basic web site with Markdown, HTML, CSS (4 weeks)</li> <li>26-30: [LINUX] Get a Linux machine (4 weeks)</li> <li>31-39: [BASH] Learn the Bash Command Line (8 weeks)</li> <li>40-52: [CODE] Learn to code in Python and JavaScript (12 weeks)</li> <li>52-01: [C] Learn C for understanding (2 weeks)</li> <li>02-14: [GO] Develop enterprise software in Go (12 weeks)</li> <li>15-17: [LXC] Leverage Linux containers (docker, podman) (3 weeks)</li> </ol> <p>Note</p> <p>Remember that this is just a boost to get you going. We'll shoot for breadth over depth so that you go away at least knowing what you don't know and have the confidence to do stuff to fill in your knowledge and mastery. The biggest challenge most learners have is knowing what to learn and why.</p> <ol> <li> <p>Learn C for understanding is done at an accelerated pace from the Head First C book over the two-week holiday break in December (weeks 52 and week 1) with about 90 minutes per day. We do not plan to finish the book but will work through as much as possible together.\u00a0\u21a9</p> </li> </ol>"},{"location":"terms/credential/","title":"Credential","text":"<p>A credential represents a collection of specific skills, for example, to fulfill a job role. Each skills included in the credential may be abstract or specific, for example, \"Create a web application with React\" versus \"Create a web application.\"</p>"},{"location":"terms/job/","title":"Job","text":"<p>A job is the real-time execution of task in progress. Finished jobs can be logged and reported.</p>"},{"location":"terms/method/","title":"Method","text":"<p>A method contains a procedure to fulfill an operation and provides a name and other identifying metadata. More than one unique method can fulfill the same operation. Methods are often rhetorically distinguished from the operations they fulfill with prepositions (\"in Go\", \"in Python\", \"with LXC containers\", \"in French\"). However, for the sake of documentation usually the operation name should be the main one indexed and searched. Methods may simply use the most appropriate preposition as their main title text (in sentence case).</p>"},{"location":"terms/occupation/","title":"Occupation","text":"<p>An occupation is something that occupies the time of the person doing it usually to provide some benefit and/or enjoyment to that person and others. Occupations require skills.</p>"},{"location":"terms/ocms/","title":"Open Credential Merit System (OCMS)","text":""},{"location":"terms/operation/","title":"Operation","text":"<p>An operation is something to be done. Operations are always give descriptive, relatively long title in sentence case with no end punctuation. While operation titles will often include prepositions methods should be documented separated and given the preposition that matches the specificity of that method.</p> <ul> <li>Create a root CA provider<ul> <li>For use by on-prem/internal Kubernetes OIDC authentication<ul> <li>Running on Ubuntu Linux server</li> <li>Running on Red Hat Enterprise Linux server</li> </ul> </li> </ul> </li> </ul>"},{"location":"terms/procedure/","title":"Procedure","text":"<p>A procedure is a set of specific logical steps with conditional branching that make up the action performed in a method. A method contains a procedure. Since a procedure is just the steps without a name a method is more commonly used.</p> <p>Related:</p> <ul> <li>Procedures https://www.indeed.com/career-advice/career-development/how-to-write-procedures-examples</li> </ul>"},{"location":"terms/skill/","title":"Skill","text":"<p>A skill is being able to perform a task.</p>"},{"location":"terms/task/","title":"Task","text":"<p>A task is a scheduled, point-in-time execution of a method in the past or present that can be logged and reported. A task that is currently being executed is a job.</p>"}]}